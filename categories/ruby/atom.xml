<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | 不歸錄]]></title>
  <link href="http://tonytonyjan.net/categories/ruby/atom.xml" rel="self"/>
  <link href="http://tonytonyjan.net/"/>
  <updated>2013-08-09T05:52:41+08:00</updated>
  <id>http://tonytonyjan.net/</id>
  <author>
    <name><![CDATA[大兜]]></name>
    <email><![CDATA[tonytonyjan@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[凱薩密碼中文版]]></title>
    <link href="http://tonytonyjan.net/2013/03/20/tj-caesar-cipher/"/>
    <updated>2013-03-20T16:33:00+08:00</updated>
    <id>http://tonytonyjan.net/2013/03/20/tj-caesar-cipher</id>
    <content type="html"><![CDATA[<p>靈感是受到凱薩密碼的影響，且英文論壇中為了避免髒話或敏感詞彙被擋，有 rot13 的出現（其實就是凱薩加密，key 設定成 13，所以 rot13 兩次會等於原來的句子）。想說中文也可這樣玩，所以決定寫一個全世界最沒用的玩具。</p>

<h2>安裝</h2>

<pre><code>gem install tj_caesar_cipher
</code></pre>

<h2>使用</h2>

<p>``` ruby</p>

<pre><code>require 'tj_caesar_cipher'
s1 = TJCaesarCipher.new("tonytonyjan")
# =&gt; "tonytonyjan" 
s1.rot_en! # 預設就是 rot13
# =&gt; "gbalgbalwna" 
s1.rot_en! # 再執行一次就會恢復原狀
# =&gt; "tonytonyjan" 
s1.rot_en(12) # 也可以給不同的 key
# =&gt; "gbalgbalwna" 

s2 = TJCaesarCipher.new("我是厲鬼，不是大神")
# =&gt; "我是厲鬼，不是大神" 
s2.rot_cjk!
# =&gt; "諸輖粙牕，直輖舎偷" 
s2.rot_cjk!
# =&gt; "我是厲鬼，不是大神" 
s2.rot_cjk(1)
# =&gt; "戒昰厳鬽，与昰夨祟"
</code></pre>

<p>```</p>

<p>如果你好奇中文版的 rot13 到底怎麼作到的……</p>

<pre><code>...
def rot_cjk! key = nil
  [
    (0x3040..0x309F),   # Hiragana
    (0x30A0..0x30FF),   # Katakana
    (0x3400..0x4DB5),   # CJKUI Ext A block
    (0x4E00..0x9FCC),   # CJK Unified Ideographs block
    (0x20000..0x2A6D6), # CJKUI Ext B block
    (0x2A700..0x2B734), # CJKUI Ext C block.
    (0x2B740..0x2B81D)  # CJKUI Ext D block.
  ].each{|range|
    range = (range.min..range.max+1) if range.count.odd?
    self.rot_unicode!(key || range.count/2, range)
  }
  self
end
...
</code></pre>

<p>以上XD</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby 2.0 重點介紹]]></title>
    <link href="http://tonytonyjan.net/2013/02/18/lets-preview-ruby-2-dot-0/"/>
    <updated>2013-02-18T22:46:00+08:00</updated>
    <id>http://tonytonyjan.net/2013/02/18/lets-preview-ruby-2-dot-0</id>
    <content type="html"><![CDATA[<p><img class="right" src="/images/ruby.jpg" width="300"></p>

<p>終於也等到了 <a href="http://www.ruby-lang.org/en/news/2013/02/08/ruby-2-0-0-rc2-is-released/">Ruby 2.0 RC 釋出的消息</a>，看來正式版本也不遠了。而 Ruby 2.0 是什麼？又到底都參了啥好處？這裡整理一些我的筆記。</p>

<p><strong>首先 Ruby 2.0 完全向下兼容</strong>，這是個好消息，意味之著你不用更改你的程式碼便可以從任何版本無痛升級 2.0（python 迷表示羨慕？），不用擔心你的 Ruby 專案（例如 Rails 等）升級後跑不動。故 Ruby 2.0 可看做是 Ruby 1.9 再加點料，而這些料可炫，且聽我道來。</p>

<h2>Refinements</h2>

<h3>Module#refine</h3>

<p>你過去擴展一個 class 可能會這樣做：</p>

<p>``` ruby</p>

<pre><code>"tonytonyjan".double
# =&gt; NoMethodError: undefined method `double' for "tonytonyjan":String

class String
  def double
    self*2
  end
end

"tonytonyjan".double # =&gt; "tonytonyjantonytonyjan"
</code></pre>

<p>```</p>

<p>Ruby 在團隊開發時，其中一項令人頭痛的問題是，當我們擴展某些 class 時，由於影響的是全局，萬一 method 撞名則會難以 debug。而現在 refinements 則可以將 class 擴展包在 namespace 裡面：</p>

<p>``` ruby</p>

<pre><code>module Foo
  refine String do
    def double
      self*2
    end
  end
  "tonytonyjan".double # =&gt; "tonytonyjantonytonyjan"
end

"tonytonyjan".double
# =&gt; NoMethodError: undefined method `double' for "tonytonyjan":String
</code></pre>

<p>```</p>

<h3>Kernel#using</h3>

<p>寫好的擴展也可以拿出來給別人用：</p>

<p>``` ruby</p>

<pre><code>module Bar
  using Foo
  "test".double # =&gt; "testtest"
end

# in proc/lambda
-&gt; {
  using Foo
  "test".double # =&gt; "testtest"
}.call
</code></pre>

<p>```</p>

<h2>Keyword Arguments</h2>

<p>寫過 python 大概對這不陌生，Ruby 2.0 也引進了一樣的功能，過去我們可能會在 method 參數中餵一個 Hash 當作 option 使用，通常會長這樣：</p>

<p>``` ruby</p>

<pre><code>def foo options = {}
  options = {a: "A", b: "B"}.merge options # given default value
  puts options[:a], options[:b]
end
</code></pre>

<p>```</p>

<p>但在 Ruby 2.0，可以簡化如下：</p>

<p>``` ruby</p>

<pre><code>def foo a: "A", b: "B"
  puts a, b
end
</code></pre>

<p>```</p>

<p>如果想拿到所有的 keys，就放兩顆星星：</p>

<p>``` ruby</p>

<pre><code>def foo(**options)
  p options
end
foo(a: "A", b: "B") # =&gt; {:a=&gt;"A", :b=&gt;"B"}
foo(:a=&gt;"A", :b=&gt;"B") # =&gt; {:a=&gt;"A", :b=&gt;"B"}
</code></pre>

<p>```</p>

<h2>Enumerator#lazy</h2>

<p>以往我們可能要設個 timeout 或 counter 去列舉無窮 enumerator，但 <code>Enumerator::Lazy</code> 讓迭代過程這變的更為簡單：</p>

<p>``` ruby</p>

<pre><code>(1..Float::INFINATY).select(&amp;:even?).take(3)      # 這會跑到海枯石爛
(1..Float::INFINATY).lazy.select(&amp;:even?).take(3) # 迭代每回合都會執行 `#event?`，而非數完所有元素
</code></pre>

<p>```</p>

<p>但不要看到新功能就高潮了，然後套用在每個地方，這方法通常不會比較有效率，除非真的有需要，否則少用為妙。</p>

<p>有興趣可以看看<a href="http://shugomaeda.blogspot.tw/2012/03/enumerablelazy-and-its-benefits.html">大師是怎麼用的</a>。</p>

<h2>Module#prepend</h2>

<p>談到擴展 class，新增 method 很容易，若想 override method 又想保留 origin 的功能卻很麻煩。</p>

<p>``` ruby</p>

<pre><code>class A
  def foo
    puts "A#foo"
    super
  end
end
</code></pre>

<p>```</p>

<p>這時我們想要幫他的 <code>#foo</code> 加點料，又不想動到原來的程式（monkey patch），多會這麼做：</p>

<p>``` ruby</p>

<pre><code>module B
  def foo
    puts "B#foo"
  end
end

class A
  include B
end

A.new.foo

# A#foo
# B#foo
</code></pre>

<p>```</p>

<p>這是利用 <code>A#foo</code> 裡頭的 <code>super</code> 來完成，但寫 <code>super</code> 不應該是被擴展的方的責任，可以話，我們希望把 super 給拿掉。因此 Rails 曾在 <code>active_support</code> 下擴展 <code>Module#alias_method_chian</code>，但因為被<a href="https://rails.lighthouseapp.com/projects/8994/tickets/285-alias_method_chain-limits-extensibility#ticket-285-20">報出問題</a>不被建議使用，Rails 3 之後建議利用 Ruby 本身的 <code>module</code> 和 <code>super</code> 特性解決問題：</p>

<p>``` ruby</p>

<pre><code>class A
  module Base
    def foo
      puts "Base"
    end
  end

  module Ext
    def foo
      puts "Ext"
      super
    end
  end

  include Base
  include Ext
end

A.new.foo

# =&gt; Ext
# Base
</code></pre>

<p>```</p>

<p>理論上一個 module 透過 inclusion 不可能 override class method，因為 module inclusion 的運作是對 class 做 subclassing，這意謂著 class A 若 include module B，則 B 會變成 A 的爸爸，superclass 無法 override subclass method（總之爸爸無法改變女兒的行為，嘛，至少程式裡面是這樣）。這也是為什麼當初 Rails 會有 <code>Module#alias_method_chian</code> 的原因。</p>

<p>Ruby 2.0 中的 <code>Module#prepend</code> 就是為了解決此問題而生，取代 <code>Module#alias_method_chian</code>：</p>

<p>``` ruby</p>

<pre><code>class A
  def foo
    puts "A"
  end
end

module Ext
  def foo
    super
    puts "Ext"
  end
end

class A
  prepend Ext
end

A.new.foo

# =&gt; A
# Ext
</code></pre>

<p>```</p>

<h2>%i：Array of Symbol</h2>

<p><code>ruby
p %w{hurray huzzah whoop}   # =&gt; ["hurray", "huzzah", "whoop"]
p %i{hurray huzzah whoop}   # =&gt; [:hurray, :huzzah, :whoop]
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Rails Template]]></title>
    <link href="http://tonytonyjan.net/2012/11/04/tony-jians-rails-template/"/>
    <updated>2012-11-04T16:24:00+08:00</updated>
    <id>http://tonytonyjan.net/2012/11/04/tony-jians-rails-template</id>
    <content type="html"><![CDATA[<h2>Why</h2>

<p>We engineers always hate repeating doing the same thing.</p>

<p>Take me for instance, everytime I create a new rails project, I edit <code>GemFile</code> to install lots of useful gems such as <code>devise</code>, <code>carrierwave</code>, etc, and then download <a href="http://twitter.github.com/bootstrap/">Twitter Bootstrap</a> with newest version, extract it into <code>vendor/assets/images</code>, <code>vendor/assets/javascripts</code> and <code>vendor/assets/stylesheets</code>, finally, replace <code>../img/xxx.png</code> into <code>xxx.png</code> in <code>bootstrap.css</code> and <code>bootstrap.min.css</code>.</p>

<h2>What</h2>

<p>My template does two things:</p>

<ol>
<li><p>Automatically install the following gems:</p>

<ul>
<li>devise</li>
<li>cancan</li>
<li>carrierwave</li>
<li>simple_form</li>
<li>dynamic_form</li>
<li>will_paginate</li>
<li>rdiscount</li>
<li>rails-i18n</li>
</ul>
</li>
<li><p>Download Twitter Boostrap with the newest version, and correspondingly extract files into <code>vendor/assets/</code></p></li>
</ol>


<h2>Usage</h2>

<pre><code>rails new myapp -m=https://raw.github.com/gist/4010690
</code></pre>

<p>Alternatively, if you encounter some SSL problem during the previous command, please download the file directly and run:</p>

<pre><code>rails new myapp -m=filename
</code></pre>

<!-- more -->


<h2>Source Code</h2>

<p><div><script src='https://gist.github.com/4010690.js'></script>
<noscript><pre><code># Generate home controller
File::unlink &quot;public/index.html&quot;
generate(:controller, &quot;home index about contact&quot;)
route &quot;root :to =&gt; &#39;home#index&#39;&quot;

# Install gem

## Access
gem &quot;devise&quot;
gem &quot;cancan&quot;
## Storage
gem &quot;carrierwave&quot;
## View
gem &quot;simple_form&quot;
gem &quot;dynamic_form&quot;
gem &quot;will_paginate&quot;
## Markup
gem &quot;rdiscount&quot;
## i18n
gem &quot;rails-i18n&quot;
## Dev
gem_group :development do
  gem &quot;faker&quot;
end

# Install Twitter Boostrap to vendor/assets/
require &#39;zip/zip&#39;
bootstrap_zip = open(&quot;http://twitter.github.com/bootstrap/assets/bootstrap.zip&quot;)
Zip::ZipFile.open(bootstrap_zip) do |zipfile|
  zipfile.each{|entry|
    base_name = File::basename(entry.name)
    case entry.to_s
    when /bootstrap\/js\/.+/
      vendor(&quot;assets/javascripts/#{base_name}&quot;, entry.get_input_stream().read())
    when /bootstrap\/css\/.+/
      vendor(&quot;assets/stylesheets/#{base_name}&quot;, entry.get_input_stream().read().gsub(/&quot;.*\/(.*\.png)&quot;/, &#39;&quot;\1&quot;&#39;))
    when /bootstrap\/img\/.+/
      vendor(&quot;assets/images/#{base_name}&quot;, entry.get_input_stream().read())
    end
  }
end

# First Commit
git :init
git :add =&gt; &quot;.&quot;
git :commit =&gt; &#39;-m &quot;init&quot;&#39;</code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[N-Gram 斷詞法實做]]></title>
    <link href="http://tonytonyjan.net/2012/06/06/an-n-gram-generator-for-ruby/"/>
    <updated>2012-06-06T17:59:00+08:00</updated>
    <id>http://tonytonyjan.net/2012/06/06/an-n-gram-generator-for-ruby</id>
    <content type="html"><![CDATA[<p>今天心血來潮在 RubyGems 搜尋了一下看有沒有可用的 N-Grams library，確實也給我找到幾個，但可惜的是他們只有針對英文做斷詞，沒有針對中日韓。我們可想像的到英文的斷詞和中文的斷詞是截然不同的，但現在許多文章卻又中英日混雜，面對這種文章，那些 library 起不了什麼作用。</p>

<p>於是用下午的時間我就自己寫了一個來解決這類的問題：</p>

<!-- more -->


<p>``` ruby
module TJNGram
  def self.process n, content</p>

<pre><code># matche Chinese, English, Japanes and Korean words
pattern = %r((\w+)|([\u3041-\u9FFF]))
# record if the token is an English word
is_english = {}

# tokenize
tokens = []
content.scan(pattern){|e,c|
  is_english[e || c] = e ? true : false
  tokens &lt;&lt; (e || c)
}

resault = Hash.new(0)
n.times{|i|
  tokens.each_slice(n){|slice|
    key = ""
    pre_state = nil
    slice.each{|token|
      key &lt;&lt; " " if !pre_state.nil? &amp;&amp; (pre_state || is_english[token])
      key &lt;&lt; token
      pre_state = is_english[token]
    }
    resault[key] += 1
  }
  tokens.shift
}
resault
</code></pre>

<p>  end
end
```</p>

<ul>
<li><a href="/blog/tjngram">說明文件</a></li>
</ul>


<p>演算法簡單，程式碼相當短，比較麻煩的地方在 pattern 裡頭，對於 unicode 範圍的定義花了點功夫去做調整，可濾掉標點符號（大部分，仍有落網之魚），只取出中日韓的單字和英文單字。</p>

<p>這段程式碼已經放在 <a href="https://github.com/tonytonyjan/TJNGram">Github</a> 和 <a href="https://rubygems.org/gems/TJNGram">RugyGems</a> 上面。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Block, Proc and Lambda]]></title>
    <link href="http://tonytonyjan.net/2011/08/12/ruby-block-proc-lambda/"/>
    <updated>2011-08-12T16:44:00+08:00</updated>
    <id>http://tonytonyjan.net/2011/08/12/ruby-block-proc-lambda</id>
    <content type="html"><![CDATA[<p>Ruby 可將程式碼當參數傳遞，被參數化的程式碼稱為 Block。也就是呼叫方法時後面的 <code>{|| }</code>  符號，其中的 <code>||</code> 之間放置參數列宣告，若無參數則可省略。</p>

<p>Ruby 的 Proc 類似 ECMAScript 的 function。在 ECMAScript 中使用關鍵字 function 即可配置一個 Function 實例。Ruby 則使用 Kernel::proc、Kernel::lambda 方法（但兩者有些微差異），或是直接建構一個 Proc 實例（Proc.new）。</p>

<h2>Block and Proc</h2>

<p>Ruby 會主動將 Block 參數化成 Proc，Block 無法單獨存在，只能作為 Ruby 指令或呼叫方法時的引數。程序員僅需利用流程指令 yield 即可將流程轉移到被參數化的 Block 中運行。我們可以用 Kernel::block_given? 判斷使用者有無傳遞 Block。</p>

<!-- more -->


<p>``` ruby Compare with Block way and Proc way</p>

<h1>Block way</h1>

<p>def f1(n)
  if block_given?</p>

<pre><code>  yield n # yield to black
</code></pre>

<p>  else</p>

<pre><code>  puts 'no block'
</code></pre>

<p>  end
end</p>

<h1>Proc way</h1>

<p>def f2(n, &amp;p)
  if block_given?</p>

<pre><code>p[n] # call proc p
# 'p[n]' can be alternated with 'p.call(n)'
# 'yield n' also works
</code></pre>

<p>  else</p>

<pre><code>puts 'no block'
</code></pre>

<p>  end
end</p>

<h1>Usage</h1>

<p>f1(&lsquo;Hello&rsquo;){|s| puts s}
f2(10){|n| n.times{puts &lsquo;a&rsquo;}}
```</p>

<h2>More about Proc</h2>

<p>Block Way 無法得知被參數化的 Block，其 Proc 的指標。如果要取得該 Proc 的指標，需要在最後一個參數前面加上 ’&amp;’，這東西只能有一個，且必須放在最後面，否則都會跳出 syntax error。</p>

<p>``` ruby Don&rsquo;t do this!
def f3(&amp;p, n) #syntax error
  # &hellip;
end</p>

<p>def f4(n, &amp;p1, &amp;p2) #syntax error
  # &hellip;
end
```</p>

<h3>Blockless</h3>

<p>如果在呼叫方法時不想加上 Block，卻又想傳入一段程式碼區塊。</p>

<p><code>ruby
def f3(n, p)
  p[n] # call proc p
  # 'p[n]' is equivalent to 'p.call(n)'
  # 'yield n' will not work unless a block was given, but notice that the block has nothing to do with parameter 'p'
end
f3('Tony', Proc.new{|name| puts name}) # 'Proc.new' is equivalent to 'Kernel::proc'
</code></p>

<p>建立一個 Proc 實體，並當參數傳入即可，但還是得在建立同時寫 Block 給 Proc.new 方法。這種寫法對於熟悉 ECMAScript 的人應該不陌生。</p>

<p><code>js
function f(n, p) { return p(n); }
f(10, function(n){print(n)});
</code></p>

<p>上面介紹的方法乍看下很冗長又不好看，的確，如果只希望傳遞僅一個程式碼區塊作為參數，上述方法稍嫌麻煩，用 Proc Way 可以簡化很多，如果對取得 Proc 的指標不感興趣，用 Block Way 更加簡潔。</p>

<h3>Passing More Than One Proc</h3>

<p>但這種將 Proc 實體當參數傳遞的方法也不盡然無用武之地，因為 Ruby 在呼叫方法時止允許傳入一個Block，當想要傳入多的程式碼區段作為參數時，適用此技。</p>

<p><code>ruby
def f4(n, p1, p2)
  p1[n]
  p2.call n
end
f4('Hi', Proc.new{|s| puts "p1: #{s}"}, proc{|s| puts "p2: #{s1}"})
</code></p>

<h3>The Ampersand</h3>

<p>剛才介紹 &amp; 的其中一個用法，那就是在方法宣告同時，指定從 Block 轉成 Proc 的變數名，除此 &amp; 隨著使用地點不同，還可以把 Proc 轉成 Block：</p>

<p><code>ruby
f1("Hahaha", &amp;proc{|s| puts s})
</code></p>

<p>proc 會回傳一個 Proc 實體，當 Proc 碰到 &amp; 之後，會轉換成 Block，所以以上的示範意義與下相同：</p>

<p><code>ruby
f1("Hahaha"){|s| puts s}
</code></p>

<p>另外還有一個妙用，如果我們想把一串單字轉換成大寫，如下：</p>

<p><code>ruby
words = %w(Jane, aara, multiko)
upcase_words = words.map {|x| x.upcase}
p upcase_words
</code></p>

<p>這看起來相當簡潔，但其實可以更簡潔：</p>

<p><code>ruby
words = %w(Jane, aara, multiko)
upcase_words = words.map(&amp;:upcase) # alternate this line
p upcase_words
</code></p>

<p>原理是因為 Ruby 可以用物件的方法名去參考到該方法（反射），舉個例子：</p>

<p><code>ruby This two lines are equivalent
“tonytonyjan”.upcase
“tonytonyjan”.send(:upcase)
</code></p>

<p>所以當我們寫出 <code>map(&amp;:upcase)</code> 這樣的語法時，他會將傳出的物件的方法化為 Proc 並執行，所以與 <code>map{|x| x.upcase}</code> 意義相同。</p>

<p>如果想調用的方法需要參數的話，則在宣告方法的同時要動點手腳，舉個例子：</p>

<p>``` ruby
def f5(n, m)
  yield n,m # yield to black
end</p>

<p>class A
  def f7 s</p>

<pre><code>puts "A.f7 says #{s}"
</code></pre>

<p>  end
end</p>

<p>f5(A.new,&ldquo;The World!&rdquo;, &amp;:f7)
```</p>

<p>&amp;:f7 會去找第一個接到的參數，並呼叫 f7，及 f5 中的 n，而在那之後所有擲出的參數，都被當成 f7 的參數。所以 <code>f5(A.new,"The World!", &amp;:f7)</code> 的真正意思是「呼叫物件 A 的 f7 方法，並傳入 &ldquo;The World!&rdquo; 當參數」。</p>

<h2>Proc and Lambda</h2>

<p>在 Wiki 中找到 <a href="http://en.wikipedia.org/wiki/Closure_(computer_science)">Closure</a> 的資料，其中有的一段 Ruby 程式碼清楚闡述了 Proc 和 Lambda的差別：</p>

<p>``` ruby Compare Proc with Lambda
def foo
  f = Proc.new { return &ldquo;return from foo from inside proc&rdquo; }
  f.call # control leaves foo here
  return &ldquo;return from foo&rdquo;
end</p>

<p>def bar
  f = lambda { return &ldquo;return from lambda&rdquo; }
  f.call # control does not leave bar here
  return &ldquo;return from bar&rdquo;
end</p>

<p>puts foo # prints &ldquo;return from foo from inside proc&rdquo;
puts bar # prints &ldquo;return from bar&rdquo;
```</p>

<p>除此之外，他們一樣。</p>

<h2>Reference</h2>

<ul>
<li><a href="http://en.wikipedia.org/wiki/Closure_(computer_science)">Wiki</a></li>
<li><a href="http://www.google.com/url?q=http%3A%2F%2Fzh.wikibooks.org%2Fwiki%2FRuby_Programming%2FSyntax%2FMethod_Calls&amp;sa=D&amp;sntz=1&amp;usg=AFQjCNFXj4QvZXjDZVQIPhrl99JDBPCmKQ">WikiBooks</a></li>
<li><a href="http://www.google.com/url?q=http%3A%2F%2Fzh.wikibooks.org%2Fwiki%2FRuby_Programming%2FSyntax%2FMethod_Calls&amp;sa=D&amp;sntz=1&amp;usg=AFQjCNFXj4QvZXjDZVQIPhrl99JDBPCmKQ">Ruby Doc</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
