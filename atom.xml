<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[不歸錄]]></title>
  <link href="http://tonytonyjan.net/atom.xml" rel="self"/>
  <link href="http://tonytonyjan.net/"/>
  <updated>2013-06-26T14:07:35+08:00</updated>
  <id>http://tonytonyjan.net/</id>
  <author>
    <name><![CDATA[大兜]]></name>
    <email><![CDATA[tonytonyjan@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[System V 與 Upstart]]></title>
    <link href="http://tonytonyjan.net/2013/06/26/system-v-and-upstart/"/>
    <updated>2013-06-26T10:53:00+08:00</updated>
    <id>http://tonytonyjan.net/2013/06/26/system-v-and-upstart</id>
    <content type="html"><![CDATA[<p>最近剛好將某個過去架設的 Heroku-like server，用 <a href="http://upstart.ubuntu.com">Upstart</a> 將傳統的 <a href="https://en.wikipedia.org/wiki/UNIX_System_V">System V</a> 替換掉，在此做個筆記，這篇文章不會教你怎麼寫啟動腳本，就只是個簡介。</p>

<p>Upstart 早在 Ubuntu 6.10 的時候首次出現，以取代傳統的 sysvinit。結果因為好評不斷，Fedora 9、Debian、Google Chrome OS 也相繼使用。其中一個最大的原因在啟動程序時採用了異步啟動（asynchronously）的方式。即便如此，鑑於不是所有的程式都有 upstart 的格式，最新的 Ubuntu 版本仍然保留了傳統的 sysvinit 啟動方式。</p>

<h2>System V</h2>

<p>若遵循古法，當希望某程式能在 Linux 啟動的時候執行，會放個腳本在 <code>/etc/init.d</code>，（通常能在 <code>/etc/init.d/skeleton</code> 找到範例），同時用 <code>update-rc.d</code>（在 RedHat 家族是  <code>chkconfig</code>）決定是否啟用該服務。這個指令會根據 <code>/etc/init.d/</code> 產生一堆軟連結（symbolic links）在 <code>/etc/rc#.d/</code>。內容物大概長的像 <code>K##foo</code> 或 <code>S##bar</code>，用以決定 kill 或 start 的順序。</p>

<p>但是系統要啟動的時候，由於程序是乖乖的依序一個個執行（即便沒有相依關係），這將大大降低啟動的速度。為了改善這個問題，Upstart 誕生了。</p>

<h2>Upstart</h2>

<p>Upstart 是一個事件驅動的啟動工具，根據 job definition files（<code>/etc/init/*.conf</code>），定義哪些服務應該在何時、何種情境下被執行，有別於 System V 的依序啟動，Upstart 的程序是異步執行的，好處是可以有效的利用系統資源，讓系統更快速的啟動（例如網路正在初始化的時候可以同時啟動一些硬碟或處理器相關的服務）。此外比起 System V 格式的腳本，<code>*.conf</code> 的腳本更易於閱讀使用。</p>

<h2>停用/啟用</h2>

<p class='info warning' data-title='注意'>一般而言，除非你清楚某 service 是幹嘛的，否則應該養成別亂停用服務的習慣。</p>


<p>如果我們今天想停用/啟用某個服務，但不知道他是否支援 upstart，可以先到 <code>/etc/init</code> 看看他是否有設定檔，或執行以下指令測試：</p>

<pre><code>$ sudo status mysql
mysql start/running, process 12461
</code></pre>

<!---->


<pre><code>$ sudo status postgresql
status: Unknown job: postgresql
</code></pre>

<p>以此為例，如果你想停用 mysql，可以直接在 <code>/etc/init/mysql.conf</code> 裡面，將檔頭附近某個以 <code>start on</code> 開頭的那行給註解掉，或是使用 <code>manual</code> 指令：</p>

<pre><code># sudo
$ echo 'manual' | sudo tee /etc/init/mysql.override # 當你不希望動到原設定，那就放個 `*.override`。
</code></pre>

<p>或是：</p>

<pre><code># root
$ echo manual &gt;&gt; /etc/init/smbd.conf
</code></pre>

<blockquote><p>更詳細的使用方法請參考 <code>man 5 init</code>，包括 <code>.override</code> 後墜的使用。</p></blockquote>

<p>至於 <code>/etc/init/postgresql.conf</code> 不存在，要馬自己寫，否則仍可用傳統的方式停用：</p>

<pre><code>sudo update-rc.d apache2 disable
sudo service apache2 stop
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[記憶翻排遊戲 - 克隆牆]]></title>
    <link href="http://tonytonyjan.net/2013/06/22/the-human-cloning-wall/"/>
    <updated>2013-06-22T07:29:00+08:00</updated>
    <id>http://tonytonyjan.net/2013/06/22/the-human-cloning-wall</id>
    <content type="html"><![CDATA[<p>好一陣子沒更新了，來個濫竽充數好了。是說前鎮子（應該算好久一陣子了XD） 2013 的韓國小姐引起一陣複製人的話題，拿來揶揄的、<a href="http://jbhuang0604.blogspot.tw/2013/04/miss-korea-2013-contestants-face.html">做研究的</a>、人臉辨識的，什麼都有，而我當時也一時興起拿以前的玩具做了一個<a href="http://human-cloning-wall.herokuapp.com/">記憶翻排遊戲</a>。</p>

<p>除了遊戲本身之外，還有積分排名的功能，enjoy。</p>

<p><img src="http://tonytonyjan.net/images/human-cloning.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Tuesday Taiwan #22 初體驗]]></title>
    <link href="http://tonytonyjan.net/2013/04/22/first-time-to-attend-ruby-tuesday/"/>
    <updated>2013-04-22T21:45:00+08:00</updated>
    <id>http://tonytonyjan.net/2013/04/22/first-time-to-attend-ruby-tuesday</id>
    <content type="html"><![CDATA[<p>這是我第一次參加 Ruby Tuesday，雖然在幾年前就知道這場聚會，但因為地點總是在台北，又都辦在晚上，即便心裡頭想去，也因麻煩如此而作罷。</p>

<p>結果作夢也想不到，第一次參加，竟然是以講者的身份，而且台下有一堆我的偶像，怕是還沒開口就先腿軟了。</p>

<iframe src="https://docs.google.com/presentation/d/13y-6Axgmu339C4lhOHNvcEtrR7xhgCJ6I-Ro5zR5nss/embed?start=false&loop=false&delayms=3000" frameborder="0" width="480" height="389" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe>


<p><img src="http://tonytonyjan.net/images/ruby-tuesday-tw.jpg"></p>

<p><img src="http://tonytonyjan.net/images/ruby-tuesday-tw2.jpg"></p>

<p><img src="http://tonytonyjan.net/images/ruby-tuesday-tw3.jpg"></p>

<p>這天看到好多偶像，又可跟見龍前輩會話，真的很開心，特別感謝當天慕凡前輩邀請我來這場盛宴。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Potluck]]></title>
    <link href="http://tonytonyjan.net/2013/04/01/potluck/"/>
    <updated>2013-04-01T12:18:00+08:00</updated>
    <id>http://tonytonyjan.net/2013/04/01/potluck</id>
    <content type="html"><![CDATA[<p><img src="http://tonytonyjan.net/images/potluck/19.jpg"></p>

<p>↑開飯前大合影。</p>

<p><img src="http://tonytonyjan.net/images/potluck/16.jpg"></p>

<p>↑豐盛的菜餚。</p>

<p><a href="http://tonytonyjan.net/images/potluck/">所有照片</a></p>

<hr />

<p>這場 Potluck 的誕生，可以追溯到二月的時候與 CSSula 成員們一起去看「決殺令」，散會後我與煥博、翔先生於樹太老續攤，順口提到，交給煥博當主辦，故有此盛宴。</p>

<p>簡白的說，<a href="http://en.wikipedia.org/wiki/Potluck">Potluck</a> 就是一群人聚餐時，每個人親自準備一道菜的聚會。記得幾年前我也要在嘉義辦一樣的活動（那時並不知道這叫「Potluck」，中文似乎也沒有對應的詞彙），但大多朋友都忙於工作，最後決定是訂一家餐廳聚會，頗是可惜。所以這次有幸可以參加這樣有趣的活動，可以說非常的高興。</p>

<p>老實說我不太會下廚呢（但我很會洗碗），在家裡可以吃到媽媽、外婆做的美味家常菜，對於自己親自下廚的吸引力就減了大半。所以我挑了一個簡單的「雞肉蕃茄咖哩」，基本上簡單到可以用膝蓋煮，只要材料比例正確，膝蓋沒有壞掉，且至少不要煮成咖哩「湯」就行了。（曾考慮泡麵，但事後覺得這樣太沒誠意了XD）</p>

<!-- more -->


<p><img src="http://tonytonyjan.net/images/potluck/1.jpg" width="400"></p>

<p>↑第一個步驟：正在削馬鈴薯的我。</p>

<p><img src="http://tonytonyjan.net/images/potluck/28.jpg" width="400"></p>

<p>↑最後一個步驟：咖哩與我。</p>

<p><img src="http://tonytonyjan.net/images/potluck/26.jpg" width="400"></p>

<p>↑Kevin 的招牌沾醬蛋。</p>

<p><img src="http://tonytonyjan.net/images/potluck/27.jpg" width="400"></p>

<p>↑煥博與他的白醬義大利麵。（誇一下，這一道料理這超香的！）</p>

<p><img src="http://tonytonyjan.net/images/potluck/30.jpg" width="400"></p>

<p>↑翔先生與他的烤棒棒腿。</p>

<p><img src="http://tonytonyjan.net/images/potluck/20.jpg" width="400"></p>

<p>↑AC 的蛋包飯。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[台科面試遊記]]></title>
    <link href="http://tonytonyjan.net/2013/03/22/the-interview-in-ntust/"/>
    <updated>2013-03-22T13:34:00+08:00</updated>
    <id>http://tonytonyjan.net/2013/03/22/the-interview-in-ntust</id>
    <content type="html"><![CDATA[<h2>來龍去脈</h2>

<p>有人搞不清楚我現在到底在幹嘛（畢業沒？等當兵？正在唸研究所？），乾脆藉這次機會解釋整個故事。</p>

<p>大四下的時候本來就要畢業去當兵了，並不打算攻讀研究所，但因為參加某個微軟的比賽認識了一位教授朋友，在他推薦台科的陳俊良教授之下，加上可以為我引薦，我被說動，理由是這位教授的專業是我有興趣的軟工和網路，所以大四下決定去考研究所。<strong>但因為我的跨下有一根屌</strong>，如果不小心畢業了，在我來得及等到申請入學之前，就會先輩抓去國軍 online。好險我當初留了一門自然向度的通識課，就是用在這種時候。最後順利的請老師把我當掉，也順利的進入大五。</p>

<p>所以正解是：我現在已經畢業了，且有一份在大五期間找到（應該算被找到）的一份工研院全職工作。</p>

<p>但這位教授沒有告訴我推甄的推薦函要他寫，我遂找了導師寫，想當然爾是沒有上，因為我的成績在系上 60% ~ 70% 左右，一下就會被助理小姐過濾掉（我會認為大學修課就是知道這在幹嘛、用在哪裡、學到什麼就好，分數有及格就行，剩下的寶貴時間應該要去學其他有用但學校未必會教的東西，或是尋找自己真正想投入的領域，要研究那是研究所的事情，所以只看我的成績的話，我是個廢物沒錯）。</p>

<h2>CWT</h2>

<p>來個和面試無關的話題，面試當天其實頗愜意的，我還和好友去逛 CWT，那時在 K 島上看到忽田各的法國麵包超人就已經很想收藏了。結果在看到攤位有擺的同時，忍不住就拜了一本。</p>

<p><img src="http://tonytonyjan.net/images/bread-man.jpg" width="300"></p>

<p>在進入考場前本來要提著這個袋子進去，但是被好友阻止XD</p>

<p><img src="http://tonytonyjan.net/images/before-interview.jpg" width="300"></p>

<h2>面試</h2>

<p>這輩子從來沒有面試過，對於要準備什麼也不是很清楚，唯一的機會是當年學測推中山，結果連面試的機會都沒給我，就在筆試被刷下來了，既然中山不要我，沒辦法只好去交大了（最近吳寶春好像也發生類似事件XD）。</p>

<p>我決定裸試，可是卻在前一天晚上靈機一動心想難得有機會表演，還是用自己的風格準備一個簡報好了：</p>

<p>簡報不會自動縮放，建議點<a href="http://tjslides.herokuapp.com/slides/34/present">播放網址</a>，按下 F11 變全螢幕觀看。</p>

<iframe src="http://tjslides.herokuapp.com/slides/34/present" height=512 width=768></iframe>


<p>結果誰知道當天電腦的瀏覽器是 IE 6，而我的簡報用了 HTML5，所以自然是播放不起來，失算啦XD，只好用口頭報告（其實本來就是打算要口頭報告）。</p>

<p>結果最想放的這一頁竟然沒有放出來：</p>

<p><img src="http://tonytonyjan.net/images/interview-slide.png"></p>

<p>（你看我真的不是來找碴的，我是抱著一顆熱騰騰的學習心來的）</p>

<h3>為什麼不好好修過</h3>

<blockquote><p>教授：「你那通識什麼成績，怎麼不好好修過呢？」<br/>
看來教授要開始洗我臉了。
我：「不，我必須被當掉。」<br/>
教授們：「！！！」
教授：「為什麼要被當掉？」<br/>
我：「因為過了就會畢業，我不能畢業，不然就要當兵無法參加面試，所以我求老師把我當掉。」</p></blockquote>

<p>教授們大概傻眼，我則講著我的故事，我猜他們一天面試三十幾個學生已經很累，又突然看到<strong>問題學生</strong>想必一定覺得很莫名其妙吧。</p>

<h3>交大軟工很弱</h3>

<p>我忘記是哪個問題讓我脫口而出，似乎是問我為什麼想來這間學校唸，我的本意是交大的軟工教育沒有符合我的期待，而我的教授朋友推薦台科陳老師，他又有軟工與計算機網路的背景，就希望能跟隨，誰知道誠實的一句話：「交大軟工很弱。」會被從頭質問到尾。我不禁納悶為什麼我講了這麼多，面試官只有聽到這句話？</p>

<p>況且交大軟工真的不是重點教育，雖然有王教授開的軟工課，但只要有修過且認真上課的同學都知道是雷，我這一屆的同班的甚至還自己發起軟工自修（自救）讀書會，相信這門課到底有幾伏特並不用我費唇舌解釋，真要說這學期軟工學到的東西，我不認為會比我在大一大二自學的多（看來我年輕時時間都<strong>浪費</strong>在這了）。</p>

<p>結論是我不是惡意批判交大，而是沒有仔細修飾自己講的話，加上我不太會說謊。</p>

<p>參考：<a href="https://www.facebook.com/714547619/posts/10151281716832620">我在 FB 開的討論</a></p>

<h3>專題</h3>

<blockquote><p>教授：「所有同學都有準備自己的專題成果，為什麼你沒有，是認為不重要嗎？」<br/>
我：「因為我認為我專題以外的成就遠超過我的專題成就。」</p></blockquote>

<p>既然提到專題就小聊一下：我的專題是蔡神指導的，他的一句話影響我很深：「大學專題就是玩，研究等去研究所再說！」，所以我就選了社群網站的應用（用 facade pattern 把各大社群網站的 API 包起來），當時還用這個做了一個「梅竹機器人」，感染五千多個清大生的噗浪帳號（後來被黑名單XD）。另外專題的副產物 <a href="https://code.google.com/p/tjplurker/">tjplurker</a> 放在 rubygems 上面也有 5000 下載次，就算沒有很多，也該有一點點點用吧？也許比起其他同學的專題來的有趣，但是沒有這麼的「學術」，所以我很清楚教授不喜歡這種東西，也實在不好意思拿來說嘴。</p>

<p>而我的專題是少數自訂題目的，所以要論在學期間的專題、學術上的成就，大概比不上其他同學（我這組連學長姊指導都沒有，更別說實驗室，全部自己 DIY）。且專題比我優秀的人路上都是，那我就不需要自曝其短。此外我也會懷疑<strong>自訂題目</strong>的專題，教授真的想聽？</p>

<h2>結語</h2>

<p>就這樣，我的第一次獻給了台科，且意外給老師留下深刻的印象。現在回想起來，我如果是那個教授，一定恨不得把這王八蛋學生掐死吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[凱薩密碼中文版]]></title>
    <link href="http://tonytonyjan.net/2013/03/20/tj-caesar-cipher/"/>
    <updated>2013-03-20T16:33:00+08:00</updated>
    <id>http://tonytonyjan.net/2013/03/20/tj-caesar-cipher</id>
    <content type="html"><![CDATA[<p>靈感是受到凱薩密碼的影響，且英文論壇中為了避免髒話或敏感詞彙被擋，有 rot13 的出現（其實就是凱薩加密，key 設定成 13，所以 rot13 兩次會等於原來的句子）。想說中文也可這樣玩，所以決定寫一個全世界最沒用的玩具。</p>

<h2>安裝</h2>

<pre><code>gem install tj_caesar_cipher
</code></pre>

<h2>使用</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;tj_caesar_cipher&#39;</span>
</span><span class='line'><span class="n">s1</span> <span class="o">=</span> <span class="no">TJCaesarCipher</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;tonytonyjan&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; &quot;tonytonyjan&quot; </span>
</span><span class='line'><span class="n">s1</span><span class="o">.</span><span class="n">rot_en!</span> <span class="c1"># 預設就是 rot13</span>
</span><span class='line'><span class="c1"># =&gt; &quot;gbalgbalwna&quot; </span>
</span><span class='line'><span class="n">s1</span><span class="o">.</span><span class="n">rot_en!</span> <span class="c1"># 再執行一次就會恢復原狀</span>
</span><span class='line'><span class="c1"># =&gt; &quot;tonytonyjan&quot; </span>
</span><span class='line'><span class="n">s1</span><span class="o">.</span><span class="n">rot_en</span><span class="p">(</span><span class="mi">12</span><span class="p">)</span> <span class="c1"># 也可以給不同的 key</span>
</span><span class='line'><span class="c1"># =&gt; &quot;gbalgbalwna&quot; </span>
</span><span class='line'>
</span><span class='line'><span class="n">s2</span> <span class="o">=</span> <span class="no">TJCaesarCipher</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;我是厲鬼，不是大神&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; &quot;我是厲鬼，不是大神&quot; </span>
</span><span class='line'><span class="n">s2</span><span class="o">.</span><span class="n">rot_cjk!</span>
</span><span class='line'><span class="c1"># =&gt; &quot;諸輖粙牕，直輖舎偷&quot; </span>
</span><span class='line'><span class="n">s2</span><span class="o">.</span><span class="n">rot_cjk!</span>
</span><span class='line'><span class="c1"># =&gt; &quot;我是厲鬼，不是大神&quot; </span>
</span><span class='line'><span class="n">s2</span><span class="o">.</span><span class="n">rot_cjk</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; &quot;戒昰厳鬽，与昰夨祟&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果你好奇中文版的 rot13 到底怎麼作到的……</p>

<pre><code>...
def rot_cjk! key = nil
  [
    (0x3040..0x309F),   # Hiragana
    (0x30A0..0x30FF),   # Katakana
    (0x3400..0x4DB5),   # CJKUI Ext A block
    (0x4E00..0x9FCC),   # CJK Unified Ideographs block
    (0x20000..0x2A6D6), # CJKUI Ext B block
    (0x2A700..0x2B734), # CJKUI Ext C block.
    (0x2B740..0x2B81D)  # CJKUI Ext D block.
  ].each{|range|
    range = (range.min..range.max+1) if range.count.odd?
    self.rot_unicode!(key || range.count/2, range)
  }
  self
end
...
</code></pre>

<p>以上XD</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[笑典 - 教育部國語辭典 Chrome 離線版]]></title>
    <link href="http://tonytonyjan.net/2013/02/19/hahadict/"/>
    <updated>2013-02-19T14:47:00+08:00</updated>
    <id>http://tonytonyjan.net/2013/02/19/hahadict</id>
    <content type="html"><![CDATA[<p><img src="http://tonytonyjan.net/images/hahadict2.png"></p>

<p><a href="https://chrome.google.com/webstore/detail/%E7%AC%91%E5%85%B8/ppgggcmomnpmeikbpaelmefpjfnmaidk">下載</a></p>

<iframe width="853" height="480" src="http://www.youtube.com/embed/oetCzmsT6IY" frameborder="0" allowfullscreen></iframe>


<p>響應 <a href="http://www.facebook.com/photo.php?fbid=500331380008153&amp;set=a.456791061028852.107377.454607821247176&amp;type=1">3du.tw 黑客松</a>時做的玩具。</p>

<h2>使用</h2>

<ol>
<li>在一般網頁 反白字串 + 右鍵</li>
<li>Ctrl + 拖曳反白</li>
</ol>


<h2>資料來源</h2>

<p>教育部重編國語辭典修訂本</p>

<h2>特別感謝</h2>

<ol>
<li>教育部國語推行委員會團隊</li>
<li>Audrey Tang、TonyQ Wang、kcwu、及其他 3du.tw 的熱血黑客</li>
</ol>


<h2>貢獻</h2>

<p><a href="https://github.com/tonytonyjan/hahadict">https://github.com/tonytonyjan/hahadict</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby 2.0 重點介紹]]></title>
    <link href="http://tonytonyjan.net/2013/02/18/lets-preview-ruby-2-dot-0/"/>
    <updated>2013-02-18T22:46:00+08:00</updated>
    <id>http://tonytonyjan.net/2013/02/18/lets-preview-ruby-2-dot-0</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://tonytonyjan.net/images/ruby.jpg" width="300"></p>

<p>終於也等到了 <a href="http://www.ruby-lang.org/en/news/2013/02/08/ruby-2-0-0-rc2-is-released/">Ruby 2.0 RC 釋出的消息</a>，看來正式版本也不遠了。而 Ruby 2.0 是什麼？又到底都參了啥好處？這裡整理一些我的筆記。</p>

<p><strong>首先 Ruby 2.0 完全向下兼容</strong>，這是個好消息，意味之著你不用更改你的程式碼便可以從任何版本無痛升級 2.0（python 迷表示羨慕？），不用擔心你的 Ruby 專案（例如 Rails 等）升級後跑不動。故 Ruby 2.0 可看做是 Ruby 1.9 再加點料，而這些料可炫，且聽我道來。</p>

<h2>Refinements</h2>

<h3>Module#refine</h3>

<p>你過去擴展一個 class 可能會這樣做：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="s2">&quot;tonytonyjan&quot;</span><span class="o">.</span><span class="n">double</span>
</span><span class='line'><span class="c1"># =&gt; NoMethodError: undefined method `double&#39; for &quot;tonytonyjan&quot;:String</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">String</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">double</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">*</span><span class="mi">2</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&quot;tonytonyjan&quot;</span><span class="o">.</span><span class="n">double</span> <span class="c1"># =&gt; &quot;tonytonyjantonytonyjan&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ruby 在團隊開發時，其中一項令人頭痛的問題是，當我們擴展某些 class 時，由於影響的是全局，萬一 method 撞名則會難以 debug。而現在 refinements 則可以將 class 擴展包在 namespace 裡面：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Foo</span>
</span><span class='line'>  <span class="n">refine</span> <span class="nb">String</span> <span class="k">do</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">double</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">*</span><span class="mi">2</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="s2">&quot;tonytonyjan&quot;</span><span class="o">.</span><span class="n">double</span> <span class="c1"># =&gt; &quot;tonytonyjantonytonyjan&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&quot;tonytonyjan&quot;</span><span class="o">.</span><span class="n">double</span>
</span><span class='line'><span class="c1"># =&gt; NoMethodError: undefined method `double&#39; for &quot;tonytonyjan&quot;:String</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Kernel#using</h3>

<p>寫好的擴展也可以拿出來給別人用：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Bar</span>
</span><span class='line'>  <span class="n">using</span> <span class="no">Foo</span>
</span><span class='line'>  <span class="s2">&quot;test&quot;</span><span class="o">.</span><span class="n">double</span> <span class="c1"># =&gt; &quot;testtest&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># in proc/lambda</span>
</span><span class='line'><span class="o">-&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">using</span> <span class="no">Foo</span>
</span><span class='line'>  <span class="s2">&quot;test&quot;</span><span class="o">.</span><span class="n">double</span> <span class="c1"># =&gt; &quot;testtest&quot;</span>
</span><span class='line'><span class="p">}</span><span class="o">.</span><span class="n">call</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Keyword Arguments</h2>

<p>寫過 python 大概對這不陌生，Ruby 2.0 也引進了一樣的功能，過去我們可能會在 method 參數中餵一個 Hash 當作 option 使用，通常會長這樣：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">foo</span> <span class="n">options</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>  <span class="n">options</span> <span class="o">=</span> <span class="p">{</span><span class="ss">a</span><span class="p">:</span> <span class="s2">&quot;A&quot;</span><span class="p">,</span> <span class="ss">b</span><span class="p">:</span> <span class="s2">&quot;B&quot;</span><span class="p">}</span><span class="o">.</span><span class="n">merge</span> <span class="n">options</span> <span class="c1"># given default value</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">options</span><span class="o">[</span><span class="ss">:a</span><span class="o">]</span><span class="p">,</span> <span class="n">options</span><span class="o">[</span><span class="ss">:b</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>但在 Ruby 2.0，可以簡化如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">foo</span> <span class="ss">a</span><span class="p">:</span> <span class="s2">&quot;A&quot;</span><span class="p">,</span> <span class="ss">b</span><span class="p">:</span> <span class="s2">&quot;B&quot;</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果想拿到所有的 keys，就放兩顆星星：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">foo</span><span class="p">(</span><span class="o">**</span><span class="n">options</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">p</span> <span class="n">options</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">foo</span><span class="p">(</span><span class="ss">a</span><span class="p">:</span> <span class="s2">&quot;A&quot;</span><span class="p">,</span> <span class="ss">b</span><span class="p">:</span> <span class="s2">&quot;B&quot;</span><span class="p">)</span> <span class="c1"># =&gt; {:a=&gt;&quot;A&quot;, :b=&gt;&quot;B&quot;}</span>
</span><span class='line'><span class="n">foo</span><span class="p">(</span><span class="ss">:a</span><span class="o">=&gt;</span><span class="s2">&quot;A&quot;</span><span class="p">,</span> <span class="ss">:b</span><span class="o">=&gt;</span><span class="s2">&quot;B&quot;</span><span class="p">)</span> <span class="c1"># =&gt; {:a=&gt;&quot;A&quot;, :b=&gt;&quot;B&quot;}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Enumerator#lazy</h2>

<p>以往我們可能要設個 timeout 或 counter 去列舉無窮 enumerator，但 <code>Enumerator::Lazy</code> 讓迭代過程這變的更為簡單：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="ss">Float</span><span class="p">:</span><span class="ss">:INFINATY</span><span class="p">)</span><span class="o">.</span><span class="n">select</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:even?</span><span class="p">)</span><span class="o">.</span><span class="n">take</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>      <span class="c1"># 這會跑到海枯石爛</span>
</span><span class='line'><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="ss">Float</span><span class="p">:</span><span class="ss">:INFINATY</span><span class="p">)</span><span class="o">.</span><span class="n">lazy</span><span class="o">.</span><span class="n">select</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:even?</span><span class="p">)</span><span class="o">.</span><span class="n">take</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="c1"># 迭代每回合都會執行 `#event?`，而非數完所有元素</span>
</span></code></pre></td></tr></table></div></figure>


<p>但不要看到新功能就高潮了，然後套用在每個地方，這方法通常不會比較有效率，除非真的有需要，否則少用為妙。</p>

<p>有興趣可以看看<a href="http://shugomaeda.blogspot.tw/2012/03/enumerablelazy-and-its-benefits.html">大師是怎麼用的</a>。</p>

<h2>Module#prepend</h2>

<p>談到擴展 class，新增 method 很容易，若想 override method 又想保留 origin 的功能卻很麻煩。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">A</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">foo</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;A#foo&quot;</span>
</span><span class='line'>    <span class="k">super</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>這時我們想要幫他的 <code>#foo</code> 加點料，又不想動到原來的程式（monkey patch），多會這麼做：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">B</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">foo</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;B#foo&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">A</span>
</span><span class='line'>  <span class="kp">include</span> <span class="n">B</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">A</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">foo</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># A#foo</span>
</span><span class='line'><span class="c1"># B#foo</span>
</span></code></pre></td></tr></table></div></figure>


<p>這是利用 <code>A#foo</code> 裡頭的 <code>super</code> 來完成，但寫 <code>super</code> 不應該是被擴展的方的責任，可以話，我們希望把 super 給拿掉。因此 Rails 曾在 <code>active_support</code> 下擴展 <code>Module#alias_method_chian</code>，但因為被<a href="https://rails.lighthouseapp.com/projects/8994/tickets/285-alias_method_chain-limits-extensibility#ticket-285-20">報出問題</a>不被建議使用，Rails 3 之後建議利用 Ruby 本身的 <code>module</code> 和 <code>super</code> 特性解決問題：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">A</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">Base</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">foo</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;Base&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">module</span> <span class="nn">Ext</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">foo</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;Ext&quot;</span>
</span><span class='line'>      <span class="k">super</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Base</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Ext</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">A</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">foo</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># =&gt; Ext</span>
</span><span class='line'><span class="c1"># Base</span>
</span></code></pre></td></tr></table></div></figure>


<p>理論上一個 module 透過 inclusion 不可能 override class method，因為 module inclusion 的運作是對 class 做 subclassing，這意謂著 class A 若 include module B，則 B 會變成 A 的爸爸，superclass 無法 override subclass method（總之爸爸無法改變女兒的行為，嘛，至少程式裡面是這樣）。這也是為什麼當初 Rails 會有 <code>Module#alias_method_chian</code> 的原因。</p>

<p>Ruby 2.0 中的 <code>Module#prepend</code> 就是為了解決此問題而生，取代 <code>Module#alias_method_chian</code>：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">A</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">foo</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;A&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">Ext</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">foo</span>
</span><span class='line'>    <span class="k">super</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Ext&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">A</span>
</span><span class='line'>  <span class="n">prepend</span> <span class="no">Ext</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">A</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">foo</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># =&gt; A</span>
</span><span class='line'><span class="c1"># Ext</span>
</span></code></pre></td></tr></table></div></figure>


<h2>%i：Array of Symbol</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">p</span> <span class="sx">%w{hurray huzzah whoop}</span>   <span class="c1"># =&gt; [&quot;hurray&quot;, &quot;huzzah&quot;, &quot;whoop&quot;]</span>
</span><span class='line'><span class="nb">p</span> <span class="o">%</span><span class="n">i</span><span class="p">{</span><span class="n">hurray</span> <span class="n">huzzah</span> <span class="n">whoop</span><span class="p">}</span>   <span class="c1"># =&gt; [:hurray, :huzzah, :whoop]</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WebConf 2013 會場志工心得]]></title>
    <link href="http://tonytonyjan.net/2013/01/15/webconf-2013-feedback/"/>
    <updated>2013-01-15T23:06:00+08:00</updated>
    <id>http://tonytonyjan.net/2013/01/15/webconf-2013-feedback</id>
    <content type="html"><![CDATA[<p><img src="http://tonytonyjan.net/images/webconf.png"></p>

<h2>報名</h2>

<p>當初在噗浪上看到<a href="http://www.plurk.com/aquarianboy">龍公</a>發的 Webconf 連結就決定要參加了。那時網路上已經討論的熱烈，正擔心搶不到票時看到了招募志工的公告，志工雖未必能聽所有想聽的議程（大約一半一半），但包吃包住又有交通補助，加上我雖有七年志工經驗，但還沒當過會場志工，於是就報名了。不過這兩天的志工經驗應該會讓我不會再當一次會場志工，雖然認識了不少點頭之交，但想聽的議程幾乎沒有聽到，且我擔任門神組，平時就要注意無線電的訊息，即便沒有當班，仍無法專心聽講，這樣的損失實在太大。</p>

<h2>會場志工</h2>

<p>我在各個慈善機構擔任過志工與領隊，第一次參與中研院的會場志工算是頗新鮮的，這裡的團隊風氣有別於以往我待過的單位，感覺大家沒有想要社交的念頭，直白的說就只是來「和認識的朋友」來當志工而已，雖然這是人之常情，但身為一個第一次參與且不屬於任何親友的人來說，疏離感非常嚴重，我是其中一個，但我會試著去找其他同樣是獨自前來的人交朋友。</p>

<p>大概是受到過去待的單位經驗的影響，其實我一直以為 Webconf 志工會有一個行前訓練，即便沒有，至少也要讓大家互相認識，志工團既是一個共同體，就應該要彼此知道誰是誰，尤其是組長這類角色更要自介，這非常的重要，試想若站崗的新人有個突發狀況卻不知道要找誰，豈不是很糟，而主辦能放心讓這樣的人擔任入口把關的志工，頗是諷刺。說實話這幾天我看到的情景就是：老人們空閒時只顧著跟老人聚在一起，新人只是玩手機、敲筆電，偶爾才跟老人寒暄幾句；而我第二天才知道我的組長和志工總召的臉長什麼樣。</p>

<p>我並不堅持要有行前訓練，但我覺得即便沒有行前志工介紹，至少老人也要多去關心一下新人，而不是讓新人主動去爬越老人們的高牆。其中我認為最扯的是第一天晚上吃披薩時，我因為想認識大家，提議要自我介紹，竟然有個「資深」的會場工作人員說「我覺得自介沒有意義」，不禁讓我覺得「資深」到底只是因為做的久而已就叫資深嗎？如果做了十年、二十年，竟然會覺得自介沒有意義，我不曉得是從來沒有遇到像我這樣的共事者出現來反駁他，還是他自己本身沒有反省過？</p>

<p>這兩天的感想是，我覺得掃地的阿姨比會場志工要好相處，也好親近多了。</p>

<p>我的建議是：</p>

<ol>
<li>如果主辦認為志工的行前訓與社交不是重點，我認為招募時讓既有的志工群找他們的親友團即可，不要公開招募，除了因為彼此認識而人力易於掌控之外，也不會讓老人有尷尬的感覺，新人也不會有疏離感，皆大歡喜。</li>
<li>如果主辦認為志工的行前訓以及狀況的了解是重點，那麼未來應該考慮是否要有個讓會場工作人員彼此熟識的機會。</li>
</ol>


<p>我覺得 Webconf 很成功，但廣大的讚聲已經夠多，那就不差我一個，而且如果主辦與我有默契，我相信主辦寧可要一篇批評文，也不要十篇讚文。</p>

<h2>慶功宴</h2>

<p>仍然是一樣的狀況：大多人並不會想要去認識原本不認識的人，但我後來和幾個工作人員混熟，聽了他們很多故事，整個宴會頗愉快的，燈光美、氣氛佳、食物好吃。中途有和久仰大名的龍公聊天，覺得龍公比想像中要平易近人許多，而且看的出來也是一個程式狂熱者。希望未來有一天可以和他一起做一些玩具來玩。</p>

<h2>小結</h2>

<p>以後還是乖乖花錢當會眾吧，不然好多想聽的議程都沒有聽到，損失更大。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[音樂創作] 獨夜]]></title>
    <link href="http://tonytonyjan.net/2013/01/15/single-night/"/>
    <updated>2013-01-15T20:37:00+08:00</updated>
    <id>http://tonytonyjan.net/2013/01/15/single-night</id>
    <content type="html"><![CDATA[<iframe width="853" height="480" src="http://www.youtube.com/embed/ubz-L9_Oe6w?list=PL1E3D73CA92E288FF" frameborder="0" allowfullscreen></iframe>


<p>似乎很久沒有在部落格上面發布音樂了，加上 Reason 過期之後就沒有在繼續音樂編曲了，大多情況都只是即興彈彈（錄音其實是很累的事情，因為筆者雖能創作，但手指不是這麼靈活。）</p>

<p>Enjoy！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[孩子，交往沒這麼神聖]]></title>
    <link href="http://tonytonyjan.net/2012/12/16/simple-love/"/>
    <updated>2012-12-16T14:53:00+08:00</updated>
    <id>http://tonytonyjan.net/2012/12/16/simple-love</id>
    <content type="html"><![CDATA[<p><img src="http://tonytonyjan.net/images/ring2.jpg"></p>

<p>「因為還沒有很瞭解，現在交往不太好」，傻孩子，若真的瞭解彼此就直接結婚或分手了，你他媽還多一段交往幹麼？就是因為沒有很熟才有交往去更認識對方。</p>

<p>人都渴望被瞭解，我們平常只看到彼此表象，但就連難得可比平常更瞭解一個人的機會都沒有嘗試一下，只有可惜你失去一個想瞭解你的人，她也失去被你瞭解的機會。除非連普通朋友都未滿，否則這人若不那麼討厭也不會難相處，何不就試一下，即便最後合不來而分開，你也多了一個超友誼的朋友。你一輩子的酒肉朋友與點頭之交已經多到不勝數，但能有幾個紅粉知己？</p>

<p>交往就是透過比朋友更深刻的往來彼此瞭解後，若合則婚，不合則分的過程，沒這麼神聖，也不用承諾什麼，本來誰不欠誰，沒有人有資格要求世上的任何一個人要愛自己，要求承諾的也多走不久（相信我，我是工程師）。承諾別亂給，真正的承諾應該要留給婚姻，留給妻子，留給家人。</p>

<p>打個比方，交往就是賭博，以青春為籌碼賭幸福婚姻。但青春不像金錢，是會隨著時間而消逝的。如果換作金錢也會隨著時間變少，我們都知道要早點花掉，買米買衣房買車，不會等全不見才在靠北當初猶豫太多什麼也沒買；但為何青春比金錢更珍貴又容易貶值，卻不懂把握當下，錯過又錯過，等到三十出頭才在埋怨沒有第一個女朋友。</p>

<p>初戀情人是妻子的案例並不多，是故人說每人至少要談兩次以上的戀愛才步入婚姻。若你忍心第一段感情發生在三十歲，那是個人自由，否則你若跟我一樣俗辣怕的要死，交往就別太挑，選妻才要挑，況且不交往要怎麼選妻呢？生活可以精彩一點，你看隔壁桌同樣籌碼人都打十圈了，自己還在細數剩下多少籌碼。</p>

<p>不妨就試一下，彩券不括開怎麼知道有沒有中獎？</p>

<p>延伸閱讀：<a href="http://tonytonyjan.net/2012/07/31/love-telless-mindset/">把愛說出來 &ndash; 追求者心態</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TJMarkdownPaste - Markdown with Tex and code highlight]]></title>
    <link href="http://tonytonyjan.net/2012/12/12/tjmarkdownpaste-markdown-with-tex-code-highlight/"/>
    <updated>2012-12-12T07:09:00+08:00</updated>
    <id>http://tonytonyjan.net/2012/12/12/tjmarkdownpaste-markdown-with-tex-code-highlight</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://tonytonyjan.net/images/tjmarkdownpaste.png" width="300"></p>

<ul>
<li><a href="http://tj-markdown-paste.herokuapp.com">TJMarkdownPaste</a></li>
<li><a href="https://groups.google.com/forum/?fromgroups#!forum/tj-markdown-paste">Google Group</a></li>
<li><a href="https://github.com/tonytonyjan/tj-markdown-paste">Github</a></li>
</ul>


<p><a href="http://tj-markdown-paste.herokuapp.com">TJMarkdownPaste</a> is a Markdown bloggin service with Tex mathematical syntax and automatic code highlight.</p>

<p>It aims to build a blogging service that belongs to we engineers and mathematician. It&rsquo;s a leisure project after my work, so there is no explicit schedule or plan. Feel free to <a href="https://github.com/tonytonyjan/tj-markdown-paste">join us</a> if your are interested in our project, then we can work together and discuss about the future of TJMarkdownPaste in the future together. =)</p>

<p><img class="right" src="http://tonytonyjan.net/images/tjmarkdownpaste2.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[活的痛快點]]></title>
    <link href="http://tonytonyjan.net/2012/11/17/how-to-live-a-wonderful-life/"/>
    <updated>2012-11-17T01:56:00+08:00</updated>
    <id>http://tonytonyjan.net/2012/11/17/how-to-live-a-wonderful-life</id>
    <content type="html"><![CDATA[<p>社會上不乏有人抱怨時間過得飛快，然而時間是公平的，真正導致這種感覺的元兇只有一個：一成不變的生活型態。</p>

<p>時間感決定於有多少活著的感覺，而活著的感覺就是記憶。我們不會因為身體成長了三十年，就自動有活了三十年的感覺，而是有三十年的記憶。所以對生活一成不變的人來說，若他今天、昨天、每一天都過得一樣，自然覺得時間過得飛快；同理對每天都不一樣的人來說，每天有值得記憶的事，他活著的感覺會比前者深刻的多。</p>

<p>從小台灣人已經很擅長一成不變的生活，自小學開始白天上課、夜晚補習的生活，十二年來飽受充足的奴性培訓（請看清楚，不是性培訓），面對毫無變化的生活可說是非常的適應，即便到了大學，社團、朋友多了、認識的人也多了，卻也安於校園而走不出學校。出了社會後更是一成不變的上班生活。然而環境本善變，安於現狀豈不無異於逆天行事？</p>

<p>此外也有出社會後就開始抱怨沒有社交圈的人，但筆者認為這不是環境問題。從小我們認識的朋友多來自校園，校園以社團、系隊、校隊還有各種活動等五花八門的環境，讓我們可以輕易參與喜歡的社交圈，不用費心尋找。但一位與真實社會隔絕十幾年的人，一出社會就面臨沒有為他準備各樣社交圈的環境，亦不難理解何有如此埋怨。</p>

<p>長大的過程中從沒有人教我們如何在校外認識社會的人事物，甚至是與陌生人交朋友。然而校園本是社會縮影，是真實社會的子集合，若出了社會就覺得社交圈變小，這也無異於本末倒置不是？</p>

<p><img src="http://tonytonyjan.net/images/freedom.jpg"></p>

<p>筆者並不敢自稱多懂生活，但活了二十年多少有些心得，最後集結成一些戒律用於每天督促自己，此文除紀錄之餘，也想與各位分享。在那之前想先分享一段美國自白派詩人的話，因為她的這段引述，與我等等要闡述的生活觀不謀而合。</p>

<blockquote><p>I can never read all the books I want. I can never be all the people I want and live all the lives I want. I can never train myself in all the skills I want. And why do I want? I want to live and feel all the shades, tones and variations of mental and physical experience possible in life. And I am horribly limited.</p><footer><strong>Sylvia Plath</strong> <cite>Unknown Source</cite></footer></blockquote>




<!-- more -->


<h2>保持好奇心</h2>

<ol>
<li><h3>對世界充滿好奇心</h3>

<p>還記得小時候會因為沒有看過長頸鹿而吵著要去動物園看嗎？就是這個心情。但是長頸鹿只是這個世界的一小小部份而已，世界之大而人一生所能及有限，明知如此人往往卻在逐漸長大之後，對於這世界的萬事萬物已不能像當初吵著去動物園一賭持長頸鹿的心情一樣，充滿好奇與興奮。</p>

<p>沒溜過冰難道不會想嘗試嗎？沒有碰過萬里長城的石磚，也不會想摸摸看嗎？筆者覺得難得來這一趟，如果不好好玩一玩再回去，學個樂器、做個裝置藝術、參加遊行、玩個快閃、極限運動、徒步旅行等等，否則豈不浪費這一張人生的入場券（<a href="http://tonytonyjan.net/2011/12/13/4/">玩世哲學</a>）。</p>

<p>所以要保持好奇心，這是我們出生不久就擁有探索世界的超能力，只是長大往往容易弄丟了，不妨趁現在有發現，趕快撿回來吧！</p></li>
<li><h3>對人充滿好奇心</h3>

<p>世界上有六十億人口，若終其一生社交圈僅來自校園與工作場合，是極其可惜的事。我們對事情的認知、看法與決策，除了書以外，一大部分左右於你我周遭的人。人善群聚而物以類聚，加上人又安於現狀，若沒刻意進入新環境，想法遲早被鎖在一個圈裡卻不自知，屆時自己對同一件事情的看法，和周遭人不會差很多。</p>

<p>舉例以一身為前三志願的大學生，對一件事也許會詢問同學看法，但因彼此太相似：讀同一個科系、同一個學校、受過的教育差不多、多是第一志願高中畢業、多來自前 10% 的家庭。此時我往往會自問，難道就不會想知道別的科系、校園外、抑或別的國家的人的看法嗎？</p>

<p>因而我喜歡認識人，所以盡其所能的去認識新朋友，從勞工到律師、從澎湖到花蓮、從土耳其到墨西哥的筆友。而這也讓我喜歡旅行，一趟旅行能認識的人可多了，如果認識了十個人，就能聽到十個不同的故事、背景、想法。有些人甚至還不知道名字（例如坐搭火車時坐在你旁邊的人），但正因為彼此人脈幾乎沒有交集，反而什麼真心話都敢講出來（<a href="http://tonytonyjan.net/2011/08/30/12/">列車上的女孩</a>）。</p>

<p>聽故事很有趣。試想一下我們走在路上，每一個擦肩過的人都有想去的地方和正要做的事情，我們統統不知道，直到只要搭上第一句話，那感覺很妙。</p>

<p>真的，我們跟陌生人的距離，只有一句話。如果可能的話，真想知道一個認識世界上的每一個人的人，他那看世界的角度會是怎麼樣。</p></li>
<li><h3>永遠不要停止學習</h3>

<p><blockquote><p>生也有涯，而知也无涯，以有涯随无涯，殆已</p><footer><strong>莊子</strong> <cite>莊子養生主</cite></footer></blockquote></p>

<p>這句話聽到快膩了，意思是說：人用有限的生命去追求無窮的知識，是必然失敗的。那既然失敗為什麼還要不停追求？八股的答案很多：「除了充實自己又可以……（略）……能夠拓展視野……（略）……知識無價……（略）」</p>

<p>談論上面太無聊了，不如說說我不停止學習的理由是因為</p>

<h1>爽，太爽了</h1>

<p>因為學會新技能的爽度就跟你養的皮卡丘終於學會十萬福特一樣很有成就感。成就感是每個人生來就會去追求的東西，而學習正是能夠有效保持此感覺的行為，再說誰不喜歡成就感呢？</p>

<p>不妨試著學一些新東西，或為世界留下什麼痕跡，即便結果沒有成功，過程帶來的成長也一樣無價。</p></li>
</ol>


<h2>每天試著完成一件特別的事</h2>

<p>何不突然打電話給自己最討厭的人（抑或最討厭自己的人），好奇過會發生什麼事嗎？大多人大概認為這種事情很無聊，但是我認為正好相反：不做這些事情反而才覺得無聊。</p>

<p>如果你的生活做的每一件事情都要正正經經的，那也太無趣，多一點無理頭和驚喜，生活才有色彩。也許「突然」租個布偶裝嚇嚇讓每個回家的人；也許「突然」死背一段法文、西班牙文等五六國的會話並在公車假裝接手機看看乘客的表情；也許「突然」打電話給最討厭自己的人看他有什麼反應。</p>

<p>我們周遭一定不乏有幾個就是這樣生活的人，他們總是可以想到很多鬼點子去付諸行動，而在待在他們身邊總是有聽不完的有趣故事。</p>

<p>正因為我們生活中可以做的遠比我們想到的還要多太多，多到計畫每個明天都會覺得時間不夠，身在如此自由的環境，如果還抱怨生活無聊，那聽起來是相當滑稽的事。何不做點什麼不一樣的，幫自己也幫別人寫下難忘的故事？不可預測的未來才是最吸引人的，而不可預測的未來自不可預測的行為。</p>

<h2>開始寫下自己的故事吧</h2>

<ol>
<li><h3>寫下人生</h3>

<p>「寫」未必就是寫在紙上，我們每天都在人生的書頁上「寫」自己的故事，是故有人比喻人生彷彿在寫作一樣：給一些設定（家庭背景、出生年月等），然後我們根據這些設定自由的揮灑自己的人生故事。只是每個人文筆大不同，雖給予了自由的文體又不限風格，仍有人會寫得老八股、平凡而單調；有的卻能高潮迭起、多采多姿。</p>

<p>人會被故事所吸引，而人的魅力終究來自他是不是一個有故事的人，他的外表、才氣反而其次。不禁試問自己是個有故事的人嗎？給予十分鐘的自我介紹，是否也能說出與眾不同的故事？</p></li>
<li><h3>寫下夢境</h3>

<p>有一說是人做夢的世界才是現實，而現實則是相對另一個世界的夢中世界。人長壽與否不在壽命，而是活著的感覺。如果你每天做的夢都能記得，就意謂著你比別人多活了 1.5 倍甚至更長的壽命，這聽起來很酷吧？</p>

<p>我喜歡紀錄自己的夢，夢也是生活的一部分，所以感覺就像在紀錄自己的生活一樣，況且夢通常是比現實更有意思卻又更容易遺忘事，不馬上寫下一定會忘記。</p>

<p>翻山越嶺最後找到飛天麵條怪物、在機器王國發現自己也是機械人、和鏡子的自己對話……</p>

<p>彷彿每個夢都是一部科幻小說，而自己是主演，這怎麼叫我不興奮。</p></li>
</ol>


<h2>當一個好好先生（太太）</h2>

<p>能者多勞？也是，但我更相信「勞者多能」。</p>

<p>筆者從小就是個不懂拒絕的人，但這個缺點卻給我帶來許多好處，在校園中只要問到我要不要參加什麼時，我都會先答應。參與的比賽從演講、板雕、水彩、音樂創作、笑話大賽到擔任班級幹部、班聯會幹部、畢業代表、專案隊長、活動組長、畢冊製作者。</p>

<p>至於從中學習到的東西，能力面從統領、策劃、創意、溝通，到性格上的耐性、包容、體諒、接納統統都有。我承認這些經驗讓我在未來解決許多難題時有很大的幫助。</p>

<p>此外勇於說「是」，也能帶來不少機會，舉些例子：</p>

<blockquote><p>  女：「你知道高鐵站怎麼去嗎？能否指引我？」</p>

<p>  我：「喔，好啊。」</p></blockquote>

<p>我是這樣認識我的紅粉知己的。</p>

<blockquote><p>  學長：「學弟，最近有個微軟的比賽，雖然你無法報名，不過要不要玩玩看？」</p>

<p>  我：「喔，好啊。」</p></blockquote>

<p>因此認識了他們的指導教授，就得到了一個進去研究所的機會。</p>

<blockquote><p>  學長：「學弟，最近工研院有人在找工程師，要不要去面試看看？」</p>

<p>  我：「喔，好啊。」</p></blockquote>

<p>然後我就真的得到一份工研院的工作。</p>

<blockquote><p>  網友：「我有個創業點子，要不要一起來？」</p>

<p>  我：「喔，好啊。」</p></blockquote>

<p>因此認識了同樣被拉進來的工程師，透過這個工程師認識了更多的業界知名的高手，交流之下我的功力也大增。</p>

<p>樂於嘗試各種事，除了增廣見聞、會的多、可能也有意想不到的好運，畢竟「機會」向來多被「說好的人」拿走。所以下次如果有人跟你邀請些什麼，只要不是太難為情的事情，就勇於說好吧，說不定你的奇幻之旅正要展開！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Rails Template]]></title>
    <link href="http://tonytonyjan.net/2012/11/04/tony-jians-rails-template/"/>
    <updated>2012-11-04T16:24:00+08:00</updated>
    <id>http://tonytonyjan.net/2012/11/04/tony-jians-rails-template</id>
    <content type="html"><![CDATA[<h2>Why</h2>

<p>We engineers always hate repeating doing the same thing.</p>

<p>Take me for instance, everytime I create a new rails project, I edit <code>GemFile</code> to install lots of useful gems such as <code>devise</code>, <code>carrierwave</code>, etc, and then download <a href="http://twitter.github.com/bootstrap/">Twitter Bootstrap</a> with newest version, extract it into <code>vendor/assets/images</code>, <code>vendor/assets/javascripts</code> and <code>vendor/assets/stylesheets</code>, finally, replace <code>../img/xxx.png</code> into <code>xxx.png</code> in <code>bootstrap.css</code> and <code>bootstrap.min.css</code>.</p>

<h2>What</h2>

<p>My template does two things:</p>

<ol>
<li><p>Automatically install the following gems:</p>

<ul>
<li>devise</li>
<li>cancan</li>
<li>carrierwave</li>
<li>simple_form</li>
<li>dynamic_form</li>
<li>will_paginate</li>
<li>rdiscount</li>
<li>rails-i18n</li>
</ul>
</li>
<li><p>Download Twitter Boostrap with the newest version, and correspondingly extract files into <code>vendor/assets/</code></p></li>
</ol>


<h2>Usage</h2>

<pre><code>rails new myapp -m=https://raw.github.com/gist/4010690
</code></pre>

<p>Alternatively, if you encounter some SSL problem during the previous command, please download the file directly and run:</p>

<pre><code>rails new myapp -m=filename
</code></pre>

<!-- more -->


<h2>Source Code</h2>

<div><script src='https://gist.github.com/4010690.js'></script>
<noscript><pre><code># Generate home controller
File::unlink &quot;public/index.html&quot;
generate(:controller, &quot;home index about contact&quot;)
route &quot;root :to =&gt; &#39;home#index&#39;&quot;

# Install gem

## Access
gem &quot;devise&quot;
gem &quot;cancan&quot;
## Storage
gem &quot;carrierwave&quot;
## View
gem &quot;simple_form&quot;
gem &quot;dynamic_form&quot;
gem &quot;will_paginate&quot;
## Markup
gem &quot;rdiscount&quot;
## i18n
gem &quot;rails-i18n&quot;
## Dev
gem_group :development do
  gem &quot;faker&quot;
end

# Install Twitter Boostrap to vendor/assets/
require &#39;zip/zip&#39;
bootstrap_zip = open(&quot;http://twitter.github.com/bootstrap/assets/bootstrap.zip&quot;)
Zip::ZipFile.open(bootstrap_zip) do |zipfile|
  zipfile.each{|entry|
    base_name = File::basename(entry.name)
    case entry.to_s
    when /bootstrap\/js\/.+/
      vendor(&quot;assets/javascripts/#{base_name}&quot;, entry.get_input_stream().read())
    when /bootstrap\/css\/.+/
      vendor(&quot;assets/stylesheets/#{base_name}&quot;, entry.get_input_stream().read().gsub(/&quot;.*\/(.*\.png)&quot;/, &#39;&quot;\1&quot;&#39;))
    when /bootstrap\/img\/.+/
      vendor(&quot;assets/images/#{base_name}&quot;, entry.get_input_stream().read())
    end
  }
end

# First Commit
git :init
git :add =&gt; &quot;.&quot;
git :commit =&gt; &#39;-m &quot;init&quot;&#39;</code></pre></noscript></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[台北一夜]]></title>
    <link href="http://tonytonyjan.net/2012/10/06/one-night-in-taipei/"/>
    <updated>2012-10-06T23:34:00+08:00</updated>
    <id>http://tonytonyjan.net/2012/10/06/one-night-in-taipei</id>
    <content type="html"><![CDATA[<p><img src="http://tonytonyjan.net/images/snow.jpg"></p>

<p>昨晚達成了夜宿小七的成就，然後體驗到了台北的溫情，以及目睹一些白天所看不到的景象。</p>

<!-- more -->


<p>這天因為晚上六點半要赴敦安討論某個廣達的雲端計畫，本來打算結束後就回新竹了。突然台北的朋友一通電話打來把我給嚇到，因為我不曾聽她如此泣不成聲的跟我敘述一件事情，至於事情的來龍去脈我就略了，重點是我決定晚上去陪陪這位朋友，於是除開會之外，在台北又多了一個行程。</p>

<p>會議約莫在九點半結束，等我到南港與那位朋友會面時已經十點，我們就逛饒河街夜市，我一邊吃一邊聽的，就這樣一直到十一點半。老實說當我決定陪這人散散心時，就沒打算要搭最後一班車回去了，以前也不是沒有露宿的經驗，但是這種事情我絕對不想再做第三次。</p>

<p>因為捷運已經沒車了，這位朋友好心的將我載到了北車附近，然後她就回去睡覺了。至於我呢？火車和客運都沒車了，在搭上隔天早上五點的首班車之前，我得找個地方打發漫漫長夜。</p>

<p>凌晨一點多，我開始在北車附近散步起來，我才知道原來北車的街友都在這個時候出現，而且數量比我預想的要多，我只是繞著北車大廳外圍一圈而已，大概二三十不等，而且通常會三五人睡在一區。怎說，我對台北的現代、繁華印象，被這一幕改觀了，但想到這裡又不禁好奇，白天他們又到哪裡去呢？</p>

<p>然後我在大門口找到一個守夜的保全，並且跟他聊起天來。原來一直以來都有一群被遺忘的人們，為了都市的秩序，每個晚上在自己的崗位守著。</p>

<blockquote><p>我：「一個人守夜，晚上又這漫長，一定很辛苦吧！」<br/>他笑著說：「哈，就加減賺嘛！」</p></blockquote>


<p>我後來問他附近是否有旅社，他很熱心的拿起傳說中的智慧型手機為我搜索與指引（筆者還在用智障型手機），我就照著他的只是，出發探險了。</p>

<p><img class="right" src="http://tonytonyjan.net/images/7-11.jpg"></p>

<p>經過一番斟酌，我決定在附近的 7-11 落腳，理由是旅社都太貴了，一晚都要一千起跳，不如找個便利商店，有吃有喝有得坐，還有書本雜誌可以翻，這時快要兩點，反正三個小時一下就過了，我就買個飲料，坐下來一邊喝一邊發呆。</p>

<p>不一下子，兩個活潑的女生走進來，消費之後打算也坐下來吃，但位子就三個，我坐在正中間，我察覺她們想坐便立馬移動到邊邊，並示意她們請坐。</p>

<blockquote><p>二女：「謝謝你，我們只是吃個宵夜而已，不會坐很久。」<br/>我：「別客氣，我可要坐到天亮呢！」</p></blockquote>


<p>好奇使然，她們向我追問下去，然後就這樣聊開了。一問之下這兩個人是台大醫院的護士，而且是今年畢業，今天是小夜班，結束後相約來此宵夜。至此但覺緣份真是奇妙，想不到只是來小七坐著，就遇到兩個同一屆同學。</p>

<p>坐在我旁邊的是典型黑框眼鏡馬尾姑娘（非常令人賞心悅目），就這般相談甚歡，她還分享了一部分的宵夜給我（但實際上只要看就看飽了）。我感受到台北的溫情，感動之至，頓時不能言語。</p>

<p>一個晚上遇到街友、保全、護士，還有其他沒有在文章出現的櫃台職員等，我看到的是每個人縱使再怎麼不同抑或沒有交集，都一樣努力的用自己的方式活下去，日復一日，年復一年。不禁反思一樣也在過日子的我，活得再苦也應無所抱怨，每個人都一樣要活著，百個人有百個活法，百種業障，我如果因為受不了自己的業就抱怨起來，對其他正在努力活著人，豈不是莫大的失敬。</p>

<p>註：而此夜遇到的每個人，散場後我皆沒有留下任何名字，一切遭遇只有封存在記憶裡面，但記憶會消逝，趁著還能憶起，捎筆寫下，以供他日回味。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[大兜的 gcc 歷險記]]></title>
    <link href="http://tonytonyjan.net/2012/10/02/dig-gcc-with-tony/"/>
    <updated>2012-10-02T13:13:00+08:00</updated>
    <id>http://tonytonyjan.net/2012/10/02/dig-gcc-with-tony</id>
    <content type="html"><![CDATA[<p>由於不是很清楚 gcc 在編譯 c 文件時到底做了什麼事情，於是展開了深入理解的旅程。從最簡單的 <code>hello.c</code> 開始：</p>

<figure class='code'><figcaption><span>hello.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">args</span><span class="p">[]){</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Hello, world!&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在編譯之前，讓我們回顧一下編譯的步驟：</p>

<table>
<thead>
<tr>
<th>步驟                   </th>
<th> 指令                      </th>
<th> 中出檔</th>
</tr>
</thead>
<tbody>
<tr>
<td>                       </td>
<td>                           </td>
<td> 原始碼</td>
</tr>
<tr>
<td>前處理（preprocessing）</td>
<td> gcc -E hello.c -o hello.i </td>
<td>   ↓↓</td>
</tr>
<tr>
<td>                       </td>
<td>                           </td>
<td> 原始碼（標頭被展開）</td>
</tr>
<tr>
<td>編譯（compiling）      </td>
<td> gcc -S hello.i -o hello.s </td>
<td>   ↓↓</td>
</tr>
<tr>
<td>                       </td>
<td>                           </td>
<td> 組合語言</td>
</tr>
<tr>
<td>組譯（assembling）     </td>
<td> gcc -c hello.s -o hello.o </td>
<td>   ↓↓</td>
</tr>
<tr>
<td>                       </td>
<td>                           </td>
<td> 機器碼</td>
</tr>
<tr>
<td>連結（linking）        </td>
<td> ld &hellip; （暫略）           </td>
<td>   ↓↓</td>
</tr>
<tr>
<td>                       </td>
<td>                           </td>
<td> 可執行機器碼</td>
</tr>
</tbody>
</table>


<pre><code>-E 僅作預先處理，不進行編譯、組譯和連結
-S 編譯到組合語言，不進行組譯和連結
-c 編譯、組譯到目的程式碼，不進行連結
</code></pre>

<p>看到鍵盤上的 <code>Esc</code> 了嗎？那正是編譯步驟，是不是超好記的。</p>

<!-- more -->


<h2>前處理（Preprocessing）</h2>

<pre><code>gcc -E hello.c -o hello.i
</code></pre>

<p>在這個步驟裡面會把標頭（header）一一展開，即範例中的 <code>stdio.h</code>，展開之後取代 <code>#include&lt;stdio.h&gt;</code>，我的 <code>hello.i</code> 就多了四百多行，看起來像是這樣子：</p>

<pre><code>// 以上 432 行略，建議自己 DIY 看看
int main(int argc, char* args[]){
  printf("Hello, world!");
}
</code></pre>

<h2>編譯</h2>

<pre><code>gcc -S hello.i -o hello.s
</code></pre>

<table>
<thead>
<tr>
<th>步驟                              </th>
<th> 輸出檔</th>
</tr>
</thead>
<tbody>
<tr>
<td>                                  </td>
<td> Sequence of characters</td>
</tr>
<tr>
<td>lexical analysis                  </td>
<td> ↓↓</td>
</tr>
<tr>
<td>                                  </td>
<td> Sequence of lexical elements</td>
</tr>
<tr>
<td>parsing                           </td>
<td> ↓↓</td>
</tr>
<tr>
<td>                                  </td>
<td> Syntax tree</td>
</tr>
<tr>
<td>semantic analysis                 </td>
<td> ↓↓</td>
</tr>
<tr>
<td>                                  </td>
<td> Annotated syntax tree</td>
</tr>
<tr>
<td>generation of intermediate code   </td>
<td> ↓↓</td>
</tr>
<tr>
<td>                                  </td>
<td> Sequence of IL</td>
</tr>
<tr>
<td>optimization of intermediate code </td>
<td> ↓↓</td>
</tr>
<tr>
<td>                                  </td>
<td> Sequence of IL</td>
</tr>
<tr>
<td>generation of pseudo code         </td>
<td> ↓↓</td>
</tr>
<tr>
<td>                                  </td>
<td> Assembly program</td>
</tr>
</tbody>
</table>


<p>編譯就是把原始碼轉換成目的語言的動作（通常就是組合語言）</p>

<figure class='code'><figcaption><span>hello.s</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='nasm'><span class='line'>  <span class="nf">.file</span> <span class="s">&quot;hello.c&quot;</span>
</span><span class='line'>  <span class="nf">.def</span>  <span class="nv">___main</span><span class="c1">;  .scl  2;  .type 32; .endef</span>
</span><span class='line'>  <span class="nf">.section</span> <span class="nv">.rdata</span><span class="p">,</span><span class="s">&quot;dr&quot;</span>
</span><span class='line'><span class="nl">LC0:</span>
</span><span class='line'>  <span class="nf">.ascii</span> <span class="s">&quot;Hello, world!\0&quot;</span>
</span><span class='line'>  <span class="nf">.text</span>
</span><span class='line'>  <span class="nf">.globl</span>  <span class="nv">_main</span>
</span><span class='line'>  <span class="nf">.def</span>  <span class="nv">_main</span><span class="c1">;  .scl  2;  .type 32; .endef</span>
</span><span class='line'><span class="nl">_main:</span>
</span><span class='line'><span class="nl">LFB6:</span>
</span><span class='line'>  <span class="nf">.cfi_startproc</span>
</span><span class='line'>  <span class="nf">pushl</span> <span class="o">%</span><span class="nb">ebp</span>
</span><span class='line'>  <span class="nf">.cfi_def_cfa_offset</span> <span class="mi">8</span>
</span><span class='line'>  <span class="nf">.cfi_offset</span> <span class="mi">5</span><span class="p">,</span> <span class="o">-</span><span class="mi">8</span>
</span><span class='line'>  <span class="nf">movl</span>  <span class="o">%</span><span class="nb">esp</span><span class="p">,</span> <span class="o">%</span><span class="nb">ebp</span>
</span><span class='line'>  <span class="nf">.cfi_def_cfa_register</span> <span class="mi">5</span>
</span><span class='line'>  <span class="nf">andl</span>  <span class="kc">$</span><span class="o">-</span><span class="mi">16</span><span class="p">,</span> <span class="o">%</span><span class="nb">esp</span>
</span><span class='line'>  <span class="nf">subl</span>  <span class="kc">$</span><span class="mi">16</span><span class="p">,</span> <span class="o">%</span><span class="nb">esp</span>
</span><span class='line'>  <span class="nf">call</span>  <span class="nv">___main</span>
</span><span class='line'>  <span class="nf">movl</span>  <span class="kc">$</span><span class="nv">LC0</span><span class="p">,</span> <span class="p">(</span><span class="o">%</span><span class="nb">esp</span><span class="p">)</span>
</span><span class='line'>  <span class="nf">call</span>  <span class="nv">_printf</span>
</span><span class='line'>  <span class="nf">leave</span>
</span><span class='line'>  <span class="nf">.cfi_restore</span> <span class="mi">5</span>
</span><span class='line'>  <span class="nf">.cfi_def_cfa</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">4</span>
</span><span class='line'>  <span class="nf">ret</span>
</span><span class='line'>  <span class="nf">.cfi_endproc</span>
</span><span class='line'><span class="nl">LFE6:</span>
</span><span class='line'>  <span class="nf">.def</span>  <span class="nv">_printf</span><span class="c1">;  .scl  2;  .type 32; .endef</span>
</span></code></pre></td></tr></table></div></figure>


<h2>組譯</h2>

<pre><code>gcc -c hello.s -o hello.o
</code></pre>

<p>組譯之後會產生目的檔（hello.o），裡面全都是機器碼。</p>

<p>但因為我們還少了連結的動作，所以 <code>hello.o</code> 還無法被執行。</p>

<h2>連結</h2>

<pre><code>ld -o hello.exe c:/mingw/bin/../lib/gcc/mingw32/4.7.0/../../../crt2.o hello.o -lmingw32 -lmoldname -lmingwex -lmsvcrt -ladvapi32 -lshell32 -luser32 -lkernel32
</code></pre>

<p>你大概感到好奇為什麼 <code>hello.o</code> 和 <code>hello.exe</code> 平平都是機器碼，少了連結，前者就無法執行。</p>

<p>這個程式就只是在黑窗上面印出一個「Hello, world!」，但我們並沒有真的去實做 IO 處理或是送訊號去顯卡，因為這些繁瑣的工作全交給 <code>printf</code> 完成了。然而在編譯的過程，編譯器並不知道 <code>printf</code> 編譯好的機器碼放在哪裡（可能在一個 <code>.obj</code> 或 <code>.lib</code> 裡面），所以在產生目的檔時，會在 <code>printf</code> 的進入點留位置給連結器（linker）去做填空，等連結器收集了所有需要的機器碼之後，才將他們填上。</p>

<p>這也是為什麼可執行檔會比原來的原始碼大很多，因為連結器插入了很多來自其他檔案的機器碼。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TJDict - Chrome 英漢、漢英網路集成字典]]></title>
    <link href="http://tonytonyjan.net/2012/08/17/tjdict-english-chinese-dictionary-for-chrome/"/>
    <updated>2012-08-17T01:53:00+08:00</updated>
    <id>http://tonytonyjan.net/2012/08/17/tjdict-english-chinese-dictionary-for-chrome</id>
    <content type="html"><![CDATA[<p><img src="http://tonytonyjan.net/images/tjdict3.png"></p>

<p><a href="http://chrome.google.com/webstore/detail/caafmojgjlbflohillejdmnghkpcjjpp">點我安裝</a></p>

<h2>為什麼要做這個？</h2>

<p>除了吃飽太閒之外，靈感來自於 Lingoes 這套軟體，那是一套可以整合各大字典且可以日漸擴充的軟體，我於是想動手做一個網頁版的，但想想其實也不需要架設 server，就把念頭動到 chrome 上面，這就是 TJDict 的由來。</p>

<p><img src="http://tonytonyjan.net/images/tjdict2.gif"></p>

<h2>查詢方法</h2>

<ol>
<li>在網頁上對單字 Ctrl + 滑鼠雙擊</li>
<li>反白單字後右鍵</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[把愛說出來 - 追求者心態]]></title>
    <link href="http://tonytonyjan.net/2012/07/31/love-telless-mindset/"/>
    <updated>2012-07-31T23:21:00+08:00</updated>
    <id>http://tonytonyjan.net/2012/07/31/love-telless-mindset</id>
    <content type="html"><![CDATA[<p><img src="http://tonytonyjan.net/images/ring.jpg"></p>

<p>如果你喜歡一個人，就行動吧，在你還喜歡對方的時候。</p>

<p>其實告白最怕的，不外乎就是遭打槍，次者就是以後碰面會尷尬。會怕是正常的，因為既是人則有得失心，有得失心，對於得不到的就會可惜。</p>

<p>我說告白又不用錢，怕什麼呢？本來就不擁有的東西，又何必在意得不到？我們也不會因為出門沒有撿到錢而難過吧？如此又何必因為告白是否成功而煩惱？</p>

<p>人對於知道自己被人喜歡，無論你我，一定都是相當欣喜的，既然不用錢，不需要吝於把這樣的欣喜送出去，今天假如我是想告白的對象，卻又沒有行動，豈不像準備了一個禮物，卻沒送出去一樣。所以當你喜歡一個人，得把握當下趕緊行動，一則你不知道你手上這份禮物對方能否收得到，二則也不知道什麼時候會變成送給別人的。</p>

<p>至於會尷尬，不過就是得失心太重罷了，喜歡不代表就要在一起，這應該分開來看，或許將此番心意是當成是一份禮物，也就不會這麼尷尬了。告白不用錢，既然能帶給一個人喜悅，何樂不為？得失心放輕，又何懼尷尬？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[先放下，再拿起]]></title>
    <link href="http://tonytonyjan.net/2012/07/21/always-keep-a-leeway/"/>
    <updated>2012-07-21T01:55:00+08:00</updated>
    <id>http://tonytonyjan.net/2012/07/21/always-keep-a-leeway</id>
    <content type="html"><![CDATA[<p><img src="http://tonytonyjan.net/images/birds3.jpg"></p>

<p>事事難料，由於不知道下一秒會發生什麼事情，往往因受挫而不知所措，畢竟人在豪無準備之下發生了預期之外之事，任誰都難以冷靜以對：以為能過的科目沒過、以為能白頭偕老的戀情告吹、以為可以追到的人被打槍、以為能順利退休的工作被公司裁員、以為能順遂活著卻突然家有變故等等。一生數個大大小小的意外，成了生活的痛苦來源。</p>

<p>人說「凡是要留退路」，這聽到要老掉牙了，但人如果真的懂得記得起教訓，我論此話也傳唱不下去。我偶爾懷疑究竟人要經歷多少個「意外」才懂得這個道理呢？多少人辦得到在榜單公佈前就先坦然接受落榜了？在一段感情開始之前就先坦然接受分手了？或在父母健在時就坦然接受他們的離去的時候？有工作時接受失業？在年輕時擁抱衰老？抑或在還活著時先面對死亡？</p>

<p>放不下的，當初就別拾起；不得已拾起的，也得學習坦然放下，人本來就一無所有，不管拿什麼都嫌太多。</p>

<p>如果你能在結婚時就接受離婚或另一半遇小三，屆時真的發生也不至於在崩潰邊緣想辦法還不知道下一步何去何從。說我在嗆衰？這不是嗆衰，筆者認為這應該是一種生活方法，理智地應付生活中的各種意外，否則還要等到事發才在調適心情兼想辦法嗎？</p>

<p>人卻很奇怪的，明知處事本該如此：辦活動要有雨備、人力備、場備、器材備以及各種突發狀況的進退應對（如某成員無法出席等）；與人談判知道特定對話要有各種回答；打線上團戰遊戲面對各種意外有事先準備好的處理程序。人處事能如此，何以做人不能同焉？</p>

<p>理由不過是因為人太自私、太貪心。這讓人們喜歡用「失去」使其扮演悲劇主角，但事實上，人沒有任何事物是應得的，又談何失去？意即能先接受未來的分手，再決定去交往，反正人生來就單身、能先接受婚姻的不美滿，再去追求婚姻，反正人生本來就孤寡、能先承受負債，再去賭博、能先擁抱努力過後的失敗，再去追求夢想。當然，能辦到先擁抱死亡，再活下去，是最好不過了，只是能做到這點也許比上述的難的多。舉了這麼多例子，我想這道理還不至難以理解。</p>

<p>你可能會猜我這種思維是悲觀的，我可不認為。凡事往壞處想，卻沉浸在悲悔之中，方謂悲觀；如能凡事往壞處想卻還能事先見招拆招、備好進退應對，能於事發之時仍有泰山崩於前而色不變之姿、心如止水而處之泰然，比起前述呼天搶地、哭爸哭母，這種先人一步消化壞事的風格，豈不一種變相的樂觀？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Masonry - 好用的動態排版工具]]></title>
    <link href="http://tonytonyjan.net/2012/07/08/masonry-a-dynamic-layout-plugin-for-jquery/"/>
    <updated>2012-07-08T14:12:00+08:00</updated>
    <id>http://tonytonyjan.net/2012/07/08/masonry-a-dynamic-layout-plugin-for-jquery</id>
    <content type="html"><![CDATA[<p><img src="http://tonytonyjan.net/images/masonry-demo.png"></p>

<p><a href="http://masonry.desandro.com">官網</a></p>

<p>昨天看到社上 JS 大神<a href="http://www.facebook.com/photo.php?fbid=4451976741683&amp;set=a.1753065630592.2102379.1357466415&amp;type=1&amp;theater&amp;notif_t=photo_reply">喔哩</a>正在寫類似 <a href="https://chrome.google.com/webstore">Google Web Store</a> 首頁那樣的圖形排版（雖然他說不太一樣）。但我想這麼常見的東西應該有可用的函式庫，果然餵狗之後被我找到了一個好用工具 <a href="http://masonry.desandro.com">Masonry</a>。</p>

<p>如果還不太懂這東西是幹麼的，不如先看看我做的簡單<a href="http://tonytonyjan.net/demo/masonry/">示範</a>，瀏覽時不妨試著調整瀏覽器視窗大小，圖片的排版會隨著視窗可視範圍而改變。</p>

<!-- more -->


<h2>使用</h2>

<h3>HTML</h3>

<p>先準備好要排版的項目，正規結構如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;container&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;item&quot;</span><span class="nt">&gt;</span>...<span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;item&quot;</span><span class="nt">&gt;</span>...<span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;item&quot;</span><span class="nt">&gt;</span>...<span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  ...
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;//ajax.googleapis.com/ajax/libs/jquery/1.6.1/jquery.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;/path/to/jquery.masonry.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>由於 Masonry 有些特效仰賴 jQuery，所以在引入 <code>masonry.js</code> 之前要先引入 <code>jquery.js</code>，如果你覺得麻煩，Masonry 後期也很貼心的提供了純 JS 版：<a href="http://vanilla-masonry.desandro.com/">Vanilla Masonry</a></p>

<h3>CSS</h3>

<p>將所有的項目設定成浮動的（floated），寬度也最好設定，否則容易排出空隙。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.item</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">width</span><span class="o">:</span> <span class="m">220px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">margin</span><span class="o">:</span> <span class="m">10px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">float</span><span class="o">:</span> <span class="k">left</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>JavaScript</h3>

<p>建議要設定 <code>itemSelector</code>，不設定也可以，他會自己抓 container 裡面的所有 elements。另外官方也建議設定 <code>columnWidth</code>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#container&#39;</span><span class="p">).</span><span class="nx">masonry</span><span class="p">({</span>
</span><span class='line'>    <span class="c1">// options</span>
</span><span class='line'>    <span class="nx">itemSelector</span> <span class="o">:</span> <span class="s1">&#39;.item&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">columnWidth</span> <span class="o">:</span> <span class="mi">240</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>完成了，更多的使用方式請<a href="http://masonry.desandro.com/docs/intro.html">看這裡</a>。</p>

<h2>非官方叮嚀</h2>

<p>當然，如果只是翻譯一下文件就拍屁股走人未免也太不夠意思，我其實另外發現官方文件少提醒了一點我覺得很重要的部份：</p>

<p>如果你只是單純照著官方文件在 item 裡面放大小不一的圖片：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;item&quot;</span><span class="nt">&gt;&lt;img</span> <span class="na">src=</span><span class="s">&quot;...&quot;</span> <span class="nt">/&gt;&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;item&quot;</span><span class="nt">&gt;&lt;img</span> <span class="na">src=</span><span class="s">&quot;...&quot;</span> <span class="nt">/&gt;&lt;/div&gt;</span>
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>不難碰上一些問題：</p>

<ol>
<li>跑出一大堆空隙，無法漂亮的排版。</li>
<li><code>div</code> 的高度比 <code>img</code> 大，圖片上下之間有空隙，而且這個空隙即使你丟了一個 <code>reset.css</code> 也無法獲得解決。</li>
</ol>


<p><img src="http://tonytonyjan.net/images/masonry-demo2.png"></p>

<p>原因出在 <code>&lt;img&gt;</code> 預設是 <code>inline</code>，且對於排版長寬不等的圖片還要求沒有空隙本來就不太合理，所以我們再加上新的 CSS 設定：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.item</span> <span class="nt">img</span><span class="p">{</span>
</span><span class='line'>  <span class="k">display</span><span class="o">:</span> <span class="k">block</span><span class="p">;</span>
</span><span class='line'>  <span class="k">max-width</span><span class="o">:</span> <span class="m">100</span><span class="o">%</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>乾杯！</p>
]]></content>
  </entry>
  
</feed>
